<?xml version="1.0" encoding="UTF-8"?>

<!-- Generated by maven-plugin-tools 3.3 on 2018-03-27 -->

<plugin>
  <name>STARTS Maven Plugin</name>
  <description>A tool for performing STAtic Regression Test Selection</description>
  <groupId>edu.illinois</groupId>
  <artifactId>starts-maven-plugin</artifactId>
  <version>1.4-SNAPSHOT</version>
  <goalPrefix>starts</goalPrefix>
  <mojos>
    <mojo>
      <goal>clean</goal>
      <description>Removes STARTS plugin artifacts.</description>
      <requiresDirectInvocation>true</requiresDirectInvocation>
      <requiresProject>true</requiresProject>
      <requiresReports>false</requiresReports>
      <aggregator>false</aggregator>
      <requiresOnline>false</requiresOnline>
      <inheritedByDefault>true</inheritedByDefault>
      <implementation>edu.illinois.starts.jdeps.CleanMojo</implementation>
      <language>java</language>
      <instantiationStrategy>per-lookup</instantiationStrategy>
      <executionStrategy>once-per-session</executionStrategy>
      <threadSafe>false</threadSafe>
      <parameters>
        <parameter>
          <name>additionalClasspathElements</name>
          <type>java.lang.String[]</type>
          <since>2.4</since>
          <required>false</required>
          <editable>true</editable>
          <description>Additional elements to be appended to the classpath.</description>
        </parameter>
        <parameter>
          <name>argLine</name>
          <type>java.lang.String</type>
          <since>2.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>Arbitrary JVM options to set on the command line.

Since the Version 2.17 using an alternate syntax for argLine, @{...} allows late replacement of properties when the plugin is executed, so properties that have been modified by other plugins will be picked up correctly. See the Frequently Asked Questions page with more details:
http://maven.apache.org/surefire/maven-surefire-plugin/faq.html
http://maven.apache.org/surefire/maven-failsafe-plugin/faq.html</description>
        </parameter>
        <parameter>
          <name>basedir</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>The base directory of the project being tested. This can be obtained in your integration test via System.getProperty(&apos;basedir&apos;).</description>
        </parameter>
        <parameter>
          <name>childDelegation</name>
          <type>boolean</type>
          <since>2.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>When false it makes tests run using the standard classloader delegation instead of the default Maven isolated classloader. Only used when forking (forkMode is not none).
Setting it to false helps with some problems caused by conflicts between xml parsers in the classpath and the Java 5 provider parser.</description>
        </parameter>
        <parameter>
          <name>classesDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>The directory containing generated classes of the project being tested. This will be included after the test classes in the test classpath.</description>
        </parameter>
        <parameter>
          <name>classpathDependencyExcludes</name>
          <type>java.lang.String[]</type>
          <since>2.6</since>
          <required>false</required>
          <editable>true</editable>
          <description>List of dependencies to exclude from the test classpath. Each dependency string must follow the format groupId:artifactId. For example: org.acme:project-a</description>
        </parameter>
        <parameter>
          <name>classpathDependencyScopeExclude</name>
          <type>java.lang.String</type>
          <since>2.6</since>
          <required>false</required>
          <editable>true</editable>
          <description>A dependency scope to exclude from the test classpath. The scope should be one of the scopes defined by org.apache.maven.artifact.Artifact. This includes the following:

-	compile - system, provided, compile
-	runtime - compile, runtime
-	compile+runtime - system, provided, compile, runtime
-	runtime+system - system, compile, runtime
-	test - system, provided, compile, runtime, test
</description>
        </parameter>
        <parameter>
          <name>debugForkedProcess</name>
          <type>java.lang.String</type>
          <since>2.4</since>
          <required>false</required>
          <editable>true</editable>
          <description>Attach a debugger to the forked JVM. If set to &apos;true&apos;, the process will suspend and wait for a debugger to attach on port 5005. If set to some other string, that string will be appended to the argLine, allowing you to configure arbitrary debuggability options (without overwriting the other options specified through the argLine parameter).</description>
        </parameter>
        <parameter>
          <name>dependenciesToScan</name>
          <type>java.lang.String[]</type>
          <since>2.15</since>
          <required>false</required>
          <editable>true</editable>
          <description>List of dependencies to scan for test classes to include in the test run. The child elements of this element must be &lt;dependency&gt; elements, and the contents of each of these elements must be a string which follows the format: groupId:artifactId. For example: org.acme:project-a.</description>
        </parameter>
        <parameter>
          <name>depFormat</name>
          <type>edu.illinois.starts.enums.DependencyFormat</type>
          <required>false</required>
          <editable>true</editable>
          <description>Allows to switch the format in which we want to store the test dependencies. A full list of what we currently support can be found in</description>
        </parameter>
        <parameter>
          <name>disableXmlReport</name>
          <type>boolean</type>
          <since>2.2</since>
          <required>false</required>
          <editable>true</editable>
          <description>Flag to disable the generation of report files in xml format.</description>
        </parameter>
        <parameter>
          <name>enableAssertions</name>
          <type>boolean</type>
          <since>2.3.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>By default, Surefire enables JVM assertions for the execution of your test cases. To disable the assertions, set this flag to &apos;false&apos;.</description>
        </parameter>
        <parameter>
          <name>environmentVariables</name>
          <type>java.util.Map</type>
          <since>2.1.3</since>
          <required>false</required>
          <editable>true</editable>
          <description>Additional environment variables to set on the command line.</description>
        </parameter>
        <parameter>
          <name>excludedGroups</name>
          <type>java.lang.String</type>
          <since>2.2</since>
          <required>false</required>
          <editable>true</editable>
          <description>(TestNG/JUnit47 provider with JUnit4.8+ only) Excluded groups. Any methods/classes/etc with one of the groups specified in this list will specifically not be run.
For JUnit, this parameter forces the use of the 4.7 provider.
This parameter is ignored if the suiteXmlFiles parameter is specified.
Since version 2.18.1 and JUnit 4.12, the @Category annotation type is automatically inherited from superclasses, see @java.lang.annotation.Inherited. Make sure that test class inheritance still makes sense together with @Category annotation of the JUnit 4.12 or higher appeared in superclass.</description>
        </parameter>
        <parameter>
          <name>excludes</name>
          <type>java.util.List</type>
          <required>false</required>
          <editable>true</editable>
          <description>A list of &lt;exclude&gt; elements specifying the tests (by pattern) that should be excluded in testing. When not specified and when the test parameter is not specified, the default excludes will be

&lt;excludes&gt;
    &lt;exclude&gt;**/*$*&lt;/exclude&gt;
&lt;/excludes&gt;

(which excludes all inner classes).
This parameter is ignored if the TestNG suiteXmlFiles parameter is specified.
Each exclude item may also contain a comma-separated sub-list of items, which will be treated as multiple Â &lt;exclude&gt; entries.
Since 2.19 a complex syntax is supported in one parameter (JUnit 4, JUnit 4.7+, TestNG):
&lt;exclude&gt;%regex[pkg.*Slow.*.class], Unstable*&lt;/exclude&gt;


Notice that these values are relative to the directory containing generated test classes of the project being tested. This directory is declared by the parameter testClassesDirectory which defaults to the POM property ${project.build.testOutputDirectory}, typically src/test/java unless overridden.</description>
        </parameter>
        <parameter>
          <name>excludesFile</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>A file containing exclude patterns. Blank lines, or lines starting with # are ignored. If excludes are also specified, these patterns are appended. Example with path, simple and regex excludes:

*/test/*
**/DontRunTest.*
%regex[.*Test.*|.*Not.*]

</description>
        </parameter>
        <parameter>
          <name>failIfNoSpecifiedTests</name>
          <type>java.lang.Boolean</type>
          <since>2.12</since>
          <required>false</required>
          <editable>true</editable>
          <description>Set this to &apos;true&apos; to cause a failure if none of the tests specified in -Dtest=... are run. Defaults to &apos;true&apos;.</description>
        </parameter>
        <parameter>
          <name>failIfNoTests</name>
          <type>java.lang.Boolean</type>
          <since>2.4</since>
          <required>false</required>
          <editable>true</editable>
          <description>Set this to &apos;true&apos; to cause a failure if there are no tests to run. Defaults to &apos;false&apos;.</description>
        </parameter>
        <parameter>
          <name>filterLib</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Set this to &apos;false&apos; to not filter out &apos;sun.*&apos; and &apos;java.*&apos; classes from jdeps parsing.</description>
        </parameter>
        <parameter>
          <name>forkCount</name>
          <type>java.lang.String</type>
          <since>2.14</since>
          <required>false</required>
          <editable>true</editable>
          <description>Option to specify the number of VMs to fork in parallel in order to execute the tests. When terminated with &apos;C&apos;, the number part is multiplied with the number of CPU cores. Floating point value are only accepted together with &apos;C&apos;. If set to &apos;0&apos;, no VM is forked and all tests are executed within the main process.

Example values: &apos;1.5C&apos;, &apos;4&apos;

The system properties and the argLine of the forked processes may contain the place holder string ${surefire.forkNumber}, which is replaced with a fixed number for each of the parallel forks, ranging from 1 to the effective value of forkCount times the maximum number of parallel Surefire executions in maven parallel builds, i.e. the effective value of the -T command line argument of maven core.</description>
        </parameter>
        <parameter>
          <name>forkedProcessExitTimeoutInSeconds</name>
          <type>int</type>
          <since>2.20</since>
          <required>false</required>
          <editable>true</editable>
          <description>Forked process is normally terminated without any significant delay after given tests have completed. If the particular tests started non-daemon Thread(s), the process hangs instead of been properly terminated by System.exit(). Use this parameter in order to determine the timeout of terminating the process. see the documentation: http://maven.apache.org/surefire/maven-surefire-plugin/examples/shutdown.html Turns to default fallback value of 30 seconds if negative integer.</description>
        </parameter>
        <parameter>
          <name>forkedProcessTimeoutInSeconds</name>
          <type>int</type>
          <since>2.4</since>
          <required>false</required>
          <editable>true</editable>
          <description>Kill the forked test process after a certain number of seconds. If set to 0, wait forever for the process, never timing out.</description>
        </parameter>
        <parameter>
          <name>forkMode</name>
          <type>java.lang.String</type>
          <since>2.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>DEPRECATED since version 2.14. Use forkCount and reuseForks instead.

Option to specify the forking mode. Can be never, once, always, perthread.
The none and pertest are also accepted for backwards compatibility.
The always forks for each test-class.
The perthread creates the number of parallel forks specified by threadCount, where each forked JVM is executing one test-class. See also the parameter reuseForks for the lifetime of JVM.</description>
        </parameter>
        <parameter>
          <name>graphCache</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Path to directory that contains the result of running jdeps on third-party and standard library jars that an application may need, e.g., those in M2_REPO.</description>
        </parameter>
        <parameter>
          <name>groups</name>
          <type>java.lang.String</type>
          <since>2.2</since>
          <required>false</required>
          <editable>true</editable>
          <description>(TestNG/JUnit47 provider with JUnit4.8+ only) Groups for this test. Only classes/methods/etc decorated with one of the groups specified here will be included in test run, if specified.
For JUnit, this parameter forces the use of the 4.7 provider
This parameter is ignored if the suiteXmlFiles parameter is specified.
Since version 2.18.1 and JUnit 4.12, the @Category annotation type is automatically inherited from superclasses, see @java.lang.annotation.Inherited. Make sure that test class inheritance still makes sense together with @Category annotation of the JUnit 4.12 or higher appeared in superclass.</description>
        </parameter>
        <parameter>
          <name>includes</name>
          <type>java.util.List</type>
          <required>false</required>
          <editable>true</editable>
          <description>A list of &lt;include&gt; elements specifying the tests (by pattern) that should be included in testing. When not specified and when the test parameter is not specified, the default includes will be
&lt;includes&gt;
    &lt;include&gt;**/Test*.java&lt;/include&gt;
    &lt;include&gt;**/*Test.java&lt;/include&gt;
    &lt;include&gt;**/*Tests.java&lt;/include&gt;
    &lt;include&gt;**/*TestCase.java&lt;/include&gt;
&lt;/includes&gt;

Each include item may also contain a comma-separated sub-list of items, which will be treated as multiple Â &lt;include&gt; entries.
Since 2.19 a complex syntax is supported in one parameter (JUnit 4, JUnit 4.7+, TestNG):



&lt;include&gt;%regex[.*[Cat|Dog].*], Basic????, !Unstable*&lt;/include&gt; &lt;include&gt;%regex[.*[Cat|Dog].*], !%regex[pkg.*Slow.*.class], pkg/**/*Fast*.java&lt;/include&gt;
This parameter is ignored if the TestNG suiteXmlFiles parameter is specified.

Notice that these values are relative to the directory containing generated test classes of the project being tested. This directory is declared by the parameter testClassesDirectory which defaults to the POM property ${project.build.testOutputDirectory}, typically src/test/java unless overridden.</description>
        </parameter>
        <parameter>
          <name>includesFile</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>A file containing include patterns. Blank lines, or lines starting with # are ignored. If includes are also specified, these patterns are appended. Example with path, simple and regex includes:
*/test/*
**/NotIncludedByDefault.java
%regex[.*Test.*|.*Not.*]

</description>
        </parameter>
        <parameter>
          <name>junitArtifactName</name>
          <type>java.lang.String</type>
          <since>2.3.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>Allows you to specify the name of the JUnit artifact. If not set, junit:junit will be used.</description>
        </parameter>
        <parameter>
          <name>jvm</name>
          <type>java.lang.String</type>
          <since>2.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>Option to specify the jvm (or path to the java executable) to use with the forking options. For the default, the jvm will be a new instance of the same VM as the one used to run Maven. JVM settings are not inherited from MAVEN_OPTS.</description>
        </parameter>
        <parameter>
          <name>loggingLevel</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Log levels as defined in java.util.logging.Level.</description>
        </parameter>
        <parameter>
          <name>objectFactory</name>
          <type>java.lang.String</type>
          <since>2.5</since>
          <required>false</required>
          <editable>true</editable>
          <description>(TestNG only) Define the factory class used to create all test instances.</description>
        </parameter>
        <parameter>
          <name>parallel</name>
          <type>java.lang.String</type>
          <since>2.2</since>
          <required>false</required>
          <editable>true</editable>
          <description>(TestNG provider) When you use the parameter parallel, TestNG will try to run all your test methods in separate threads, except for methods that depend on each other, which will be run in the same thread in order to respect their order of execution.
(JUnit 4.7 provider) Supports values classes, methods, both to run in separate threads been controlled by threadCount.

Since version 2.16 (JUnit 4.7 provider), the value both is DEPRECATED. Use classesAndMethods instead.

Since version 2.16 (JUnit 4.7 provider), additional vales are available:
suites, suitesAndClasses, suitesAndMethods, classesAndMethods, all.</description>
        </parameter>
        <parameter>
          <name>parallelOptimized</name>
          <type>boolean</type>
          <since>2.17</since>
          <required>false</required>
          <editable>true</editable>
          <description>(JUnit 4.7 / provider only) The thread counts do not exceed the number of parallel suite, class runners and average number of methods per class if set to true.
True by default.</description>
        </parameter>
        <parameter>
          <name>parallelTestsTimeoutForcedInSeconds</name>
          <type>double</type>
          <since>2.16</since>
          <required>false</required>
          <editable>true</editable>
          <description>Stop executing queued parallel JUnit tests and interrupt currently running tests after a certain number of seconds.
Example values: &apos;3.5&apos;, &apos;4&apos;

If set to 0, wait forever, never timing out. Makes sense with specified parallel different from &apos;none&apos;.</description>
        </parameter>
        <parameter>
          <name>parallelTestsTimeoutInSeconds</name>
          <type>double</type>
          <since>2.16</since>
          <required>false</required>
          <editable>true</editable>
          <description>Stop executing queued parallel JUnit tests after a certain number of seconds.
Example values: &apos;3.5&apos;, &apos;4&apos;

If set to 0, wait forever, never timing out. Makes sense with specified parallel different from &apos;none&apos;.</description>
        </parameter>
        <parameter>
          <name>perCoreThreadCount</name>
          <type>boolean</type>
          <since>2.5</since>
          <required>false</required>
          <editable>true</editable>
          <description>(JUnit 4.7 provider) Indicates that threadCount, threadCountSuites, threadCountClasses, threadCountMethods are per cpu core.</description>
        </parameter>
        <parameter>
          <name>printGraph</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Set this to &apos;false&apos; to not print the graph obtained from jdeps parsing. When &apos;true&apos; the graph is written to file after the run.</description>
        </parameter>
        <parameter>
          <name>printSummary</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Option to print summary of test suites or just print the test cases that have errors.</description>
        </parameter>
        <parameter>
          <name>properties</name>
          <type>java.util.Properties</type>
          <since>2.4</since>
          <required>false</required>
          <editable>true</editable>
          <description>List of properties for configuring all TestNG related configurations. This is the new preferred method of configuring TestNG.</description>
        </parameter>
        <parameter>
          <name>redirectTestOutputToFile</name>
          <type>boolean</type>
          <since>2.3</since>
          <required>false</required>
          <editable>true</editable>
          <description>Set this to &apos;true&apos; to redirect the unit test standard output to a file (found in reportsDirectory/testName-output.txt).</description>
        </parameter>
        <parameter>
          <name>remoteRepositories</name>
          <type>java.util.List</type>
          <since>2.2</since>
          <required>false</required>
          <editable>true</editable>
          <description>The remote plugin repositories declared in the POM.</description>
        </parameter>
        <parameter>
          <name>reportFormat</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Selects the formatting for the test report to be generated. Can be set as &apos;brief&apos; or &apos;plain&apos;. Only applies to the output format of the output files (target/surefire-reports/testName.txt)</description>
        </parameter>
        <parameter>
          <name>reportNameSuffix</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Add custom text into report filename: TEST-testClassName-reportNameSuffix.xml, testClassName-reportNameSuffix.txt and testClassName-reportNameSuffix-output.txt. File TEST-testClassName-reportNameSuffix.xml has changed attributes &apos;testsuite&apos;--&apos;name&apos; and &apos;testcase&apos;--&apos;classname&apos; - reportNameSuffix is added to the attribute value.</description>
        </parameter>
        <parameter>
          <name>reportsDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>Base directory where all reports are written to.</description>
        </parameter>
        <parameter>
          <name>rerunFailingTestsCount</name>
          <type>int</type>
          <required>false</required>
          <editable>true</editable>
          <description>(JUnit 4+ providers) The number of times each failing test will be rerun. If set larger than 0, rerun failing tests immediately after they fail. If a failing test passes in any of those reruns, it will be marked as pass and reported as a &apos;flake&apos;. However, all the failing attempts will be recorded.</description>
        </parameter>
        <parameter>
          <name>reuseForks</name>
          <type>boolean</type>
          <since>2.13</since>
          <required>false</required>
          <editable>true</editable>
          <description>Indicates if forked VMs can be reused. If set to &apos;false&apos;, a new VM is forked for each test class to be executed. If set to &apos;true&apos;, up to forkCount VMs will be forked and then reused to execute all tests.</description>
        </parameter>
        <parameter>
          <name>runOrder</name>
          <type>java.lang.String</type>
          <since>2.7</since>
          <required>false</required>
          <editable>true</editable>
          <description>Defines the order the tests will be run in. Supported values are alphabetical, reversealphabetical, random, hourly (alphabetical on even hours, reverse alphabetical on odd hours), failedfirst, balanced and filesystem.

Odd/Even for hourly is determined at the time the of scanning the classpath, meaning it could change during a multi-module build.

Failed first will run tests that failed on previous run first, as well as new tests for this run.

Balanced is only relevant with parallel=classes, and will try to optimize the run-order of the tests reducing the overall execution time. Initially a statistics file is created and every next test run will reorder classes.

Note that the statistics are stored in a file named .surefire-XXXXXXXXX beside pom.xml and should not be checked into version control. The &apos;XXXXX&apos; is the SHA1 checksum of the entire surefire configuration, so different configurations will have different statistics files, meaning if you change any configuration settings you will re-run once before new statistics data can be established.</description>
        </parameter>
        <parameter>
          <name>shutdown</name>
          <type>java.lang.String</type>
          <since>2.19</since>
          <required>false</required>
          <editable>true</editable>
          <description>After the plugin process is shutdown by sending SIGTERM signal (CTRL+C), SHUTDOWN command is received by every forked JVM.
By default (shutdown=testset) forked JVM would not continue with new test which means that the current test may still continue to run.
The parameter can be configured with other two values exit and kill.
Using exit forked JVM executes System.exit(1) after the plugin process has received SIGTERM signal.
Using kill the JVM executes Runtime.halt(1) and kills itself.</description>
        </parameter>
        <parameter>
          <name>skip</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Set this to &apos;true&apos; to bypass unit tests entirely. Its use is NOT RECOMMENDED, especially if you enable it using the &apos;maven.test.skip&apos; property, because maven.test.skip disables both running the tests and compiling the tests. Consider using the skipTests parameter instead.</description>
        </parameter>
        <parameter>
          <name>skipAfterFailureCount</name>
          <type>int</type>
          <since>2.19</since>
          <required>false</required>
          <editable>true</editable>
          <description>Set to error/failure count in order to skip remaining tests. Due to race conditions in parallel/forked execution this may not be fully guaranteed.
Enable with system property -Dsurefire.skipAfterFailureCount=1 or any number greater than zero. Defaults to &apos;0&apos;.
See the prerequisites and limitations in documentation:
http://maven.apache.org/plugins/maven-surefire-plugin/examples/skip-after-failure.html</description>
        </parameter>
        <parameter>
          <name>skipExec</name>
          <type>boolean</type>
          <since>2.3</since>
          <deprecated>Use skipTests instead.</deprecated>
          <required>false</required>
          <editable>true</editable>
          <description>This old parameter is just like skipTests, but bound to the old property &apos;maven.test.skip.exec&apos;.</description>
        </parameter>
        <parameter>
          <name>skipTests</name>
          <type>boolean</type>
          <since>2.4</since>
          <required>false</required>
          <editable>true</editable>
          <description>Set this to &apos;true&apos; to skip running tests, but still compile them. Its use is NOT RECOMMENDED, but quite convenient on occasion.</description>
        </parameter>
        <parameter>
          <name>suiteXmlFiles</name>
          <type>java.io.File[]</type>
          <since>2.2</since>
          <required>false</required>
          <editable>true</editable>
          <description>(TestNG) List of &lt;suiteXmlFile&gt; elements specifying TestNG suite xml file locations. Note that suiteXmlFiles is incompatible with several other parameters of this plugin, like includes and excludes.
This parameter is ignored if the test parameter is specified (allowing you to run a single test instead of an entire suite).</description>
        </parameter>
        <parameter>
          <name>systemProperties</name>
          <type>java.util.Properties</type>
          <deprecated>Use systemPropertyVariables instead.</deprecated>
          <required>false</required>
          <editable>true</editable>
          <description>List of System properties to pass to the JUnit tests.</description>
        </parameter>
        <parameter>
          <name>systemPropertiesFile</name>
          <type>java.io.File</type>
          <since>2.8.2</since>
          <required>false</required>
          <editable>true</editable>
          <description>List of System properties, loaded from a file, to pass to the JUnit tests.</description>
        </parameter>
        <parameter>
          <name>systemPropertyVariables</name>
          <type>java.util.Map</type>
          <since>2.5</since>
          <required>false</required>
          <editable>true</editable>
          <description>List of System properties to pass to the JUnit tests.</description>
        </parameter>
        <parameter>
          <name>tempDir</name>
          <type>java.lang.String</type>
          <since>2.20</since>
          <required>false</required>
          <editable>true</editable>
          <description>Relative path to temporary-surefire-boot directory containing internal Surefire temporary files.
The temporary-surefire-boot directory is project.build.directory on most platforms or system default temporary-directory specified by the system property java.io.tmpdir on Windows (see SUREFIRE-1400).
It is deleted after the test set has completed.</description>
        </parameter>
        <parameter>
          <name>test</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specify this parameter to run individual tests by file name, overriding the parameter includes and excludes. Each pattern you specify here will be used to create an include pattern formatted like **/${test}.java, so you can just type -Dtest=MyTest to run a single test called &apos;foo/MyTest.java&apos;. The test patterns prefixed with a ! will be excluded.
This parameter overrides the parameter includes, excludes, and the TestNG parameter suiteXmlFiles.
Since 2.7.3, you can execute a limited number of methods in the test by adding #myMethod or #my*ethod. For example, -Dtest=MyTest#myMethod. This is supported for junit 4.x and TestNg.

Since 2.19 a complex syntax is supported in one parameter (JUnit 4, JUnit 4.7+, TestNG):
&apos;-Dtest=???Test, !Unstable*, pkg/**/Ci*leTest.java, *Test#test*One+testTwo?????, #fast*+slowTest&apos;

or e.g.
&apos;-Dtest=Basic*, !%regex[.*.Unstable.*], !%regex[.*.MyTest.class#one.*|two.*], %regex[#fast.*|slow.*]&apos;


The Parameterized JUnit runner describes test methods using an index in brackets, so the non-regex method pattern would become: #testMethod[*]. If using @Parameters(name=&apos;{index}: fib({0})={1}&apos;) and selecting the index e.g. 5 in pattern, the non-regex method pattern would become #testMethod[5:*].</description>
        </parameter>
        <parameter>
          <name>testClassesDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>The directory containing generated test classes of the project being tested. This will be included at the beginning of the test classpath. *</description>
        </parameter>
        <parameter>
          <name>testFailureIgnore</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Set this to &apos;true&apos; to ignore a failure during testing. Its use is NOT RECOMMENDED, but quite convenient on occasion.</description>
        </parameter>
        <parameter>
          <name>testNGArtifactName</name>
          <type>java.lang.String</type>
          <since>2.3.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>Allows you to specify the name of the TestNG artifact. If not set, org.testng:testng will be used.</description>
        </parameter>
        <parameter>
          <name>testSourceDirectory</name>
          <type>java.io.File</type>
          <since>2.2</since>
          <required>true</required>
          <editable>true</editable>
          <description>The test source directory containing test class sources.</description>
        </parameter>
        <parameter>
          <name>threadCount</name>
          <type>int</type>
          <since>2.2</since>
          <required>false</required>
          <editable>true</editable>
          <description>(TestNG/JUnit 4.7 provider) The attribute thread-count allows you to specify how many threads should be allocated for this execution. Only makes sense to use in conjunction with the parallel parameter.</description>
        </parameter>
        <parameter>
          <name>threadCountClasses</name>
          <type>int</type>
          <since>2.16</since>
          <required>false</required>
          <editable>true</editable>
          <description>(JUnit 4.7 provider) This attribute allows you to specify the concurrency in test classes, i.e.:
-	number of concurrent classes if threadCount is 0 or unspecified
-	limited classes concurrency if useUnlimitedThreads is set to true
-	if threadCount and certain thread-count parameters are &gt; 0 for parallel, the concurrency is computed from ratio. For instance parallel=all and the ratio between threadCountSuites:threadCountClasses:threadCountMethods is 2:3:5, there is 30% of threadCount in concurrent classes.
-	as in the previous case but without this leaf thread-count. Example: parallel=suitesAndClasses, threadCount=16, threadCountSuites=5, threadCountClasses is unspecified leaf, the number of concurrent classes is varying from &gt;= 11 to 14 or 15. The threadCountSuites become given number of threads.
Only makes sense to use in conjunction with the parallel parameter. The default value 0 behaves same as unspecified one.</description>
        </parameter>
        <parameter>
          <name>threadCountMethods</name>
          <type>int</type>
          <since>2.16</since>
          <required>false</required>
          <editable>true</editable>
          <description>(JUnit 4.7 provider) This attribute allows you to specify the concurrency in test methods, i.e.:
-	number of concurrent methods if threadCount is 0 or unspecified
-	limited concurrency of methods if useUnlimitedThreads is set to true
-	if threadCount and certain thread-count parameters are &gt; 0 for parallel, the concurrency is computed from ratio. For instance parallel=all and the ratio between threadCountSuites:threadCountClasses:threadCountMethods is 2:3:5, there is 50% of threadCount which appears in concurrent methods.
-	as in the previous case but without this leaf thread-count. Example: parallel=all, threadCount=16, threadCountSuites=2, threadCountClasses=3, but threadCountMethods is unspecified leaf, the number of concurrent methods is varying from &gt;= 11 to 14 or 15. The threadCountSuites and threadCountClasses become given number of threads.
Only makes sense to use in conjunction with the parallel parameter. The default value 0 behaves same as unspecified one.</description>
        </parameter>
        <parameter>
          <name>threadCountSuites</name>
          <type>int</type>
          <since>2.16</since>
          <required>false</required>
          <editable>true</editable>
          <description>(JUnit 4.7 provider) This attribute allows you to specify the concurrency in test suites, i.e.:
-	number of concurrent suites if threadCount is 0 or unspecified
-	limited suites concurrency if useUnlimitedThreads is set to true
-	if threadCount and certain thread-count parameters are &gt; 0 for parallel, the concurrency is computed from ratio. For instance parallel=all and the ratio between threadCountSuites:threadCountClasses:threadCountMethods is 2:3:5, there is 20% of threadCount which appeared in concurrent suites.
Only makes sense to use in conjunction with the parallel parameter. The default value 0 behaves same as unspecified one.</description>
        </parameter>
        <parameter>
          <name>trimStackTrace</name>
          <type>boolean</type>
          <since>2.2</since>
          <required>false</required>
          <editable>true</editable>
          <description>Whether to trim the stack trace in the reports to just the lines within the test, or show the full trace.</description>
        </parameter>
        <parameter>
          <name>useFile</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Option to generate a file test report or just output the test report to the console.</description>
        </parameter>
        <parameter>
          <name>useManifestOnlyJar</name>
          <type>boolean</type>
          <since>2.4.3</since>
          <required>false</required>
          <editable>true</editable>
          <description>By default, Surefire forks your tests using a manifest-only JAR; set this parameter to &apos;false&apos; to force it to launch your tests with a plain old Java classpath. (See the http://maven.apache.org/plugins/maven-surefire-plugin/examples/class-loading.html for a more detailed explanation of manifest-only JARs and their benefits.)
Beware, setting this to &apos;false&apos; may cause your tests to fail on Windows if your classpath is too long.</description>
        </parameter>
        <parameter>
          <name>useSystemClassLoader</name>
          <type>boolean</type>
          <since>2.3</since>
          <required>false</required>
          <editable>true</editable>
          <description>Option to pass dependencies to the system&apos;s classloader instead of using an isolated class loader when forking. Prevents problems with JDKs which implement the service provider lookup mechanism by using the system&apos;s ClassLoader.</description>
        </parameter>
        <parameter>
          <name>useUnlimitedThreads</name>
          <type>boolean</type>
          <since>2.5</since>
          <required>false</required>
          <editable>true</editable>
          <description>(JUnit 4.7 provider) Indicates that the thread pool will be unlimited. The parallel parameter and the actual number of classes/methods will decide. Setting this to &apos;true&apos; effectively disables perCoreThreadCount and threadCount. Defaults to &apos;false&apos;.</description>
        </parameter>
        <parameter>
          <name>workingDirectory</name>
          <type>java.io.File</type>
          <since>2.1.3</since>
          <required>false</required>
          <editable>true</editable>
          <description>Command line working directory.</description>
        </parameter>
      </parameters>
      <configuration>
        <additionalClasspathElements implementation="java.lang.String[]">${maven.test.additionalClasspath}</additionalClasspathElements>
        <argLine implementation="java.lang.String">${argLine}</argLine>
        <basedir implementation="java.io.File" default-value="${basedir}"/>
        <childDelegation implementation="boolean" default-value="false">${childDelegation}</childDelegation>
        <classesDirectory implementation="java.io.File" default-value="${project.build.outputDirectory}"/>
        <classpathDependencyExcludes implementation="java.lang.String[]">${maven.test.dependency.excludes}</classpathDependencyExcludes>
        <debugForkedProcess implementation="java.lang.String">${maven.surefire.debug}</debugForkedProcess>
        <dependenciesToScan implementation="java.lang.String[]">${dependenciesToScan}</dependenciesToScan>
        <depFormat implementation="edu.illinois.starts.enums.DependencyFormat" default-value="ZLC">${depFormat}</depFormat>
        <disableXmlReport implementation="boolean" default-value="false">${disableXmlReport}</disableXmlReport>
        <enableAssertions implementation="boolean" default-value="true">${enableAssertions}</enableAssertions>
        <excludedGroups implementation="java.lang.String">${excludedGroups}</excludedGroups>
        <excludesFile implementation="java.io.File">${surefire.excludesFile}</excludesFile>
        <failIfNoSpecifiedTests implementation="java.lang.Boolean">${surefire.failIfNoSpecifiedTests}</failIfNoSpecifiedTests>
        <failIfNoTests implementation="java.lang.Boolean">${failIfNoTests}</failIfNoTests>
        <filterLib implementation="boolean" default-value="false">${filterLib}</filterLib>
        <forkCount implementation="java.lang.String" default-value="1">${forkCount}</forkCount>
        <forkedProcessExitTimeoutInSeconds implementation="int" default-value="30">${surefire.exitTimeout}</forkedProcessExitTimeoutInSeconds>
        <forkedProcessTimeoutInSeconds implementation="int">${surefire.timeout}</forkedProcessTimeoutInSeconds>
        <forkMode implementation="java.lang.String" default-value="once">${forkMode}</forkMode>
        <graphCache implementation="java.lang.String" default-value="${basedir}${file.separator}jdeps-cache">${gCache}</graphCache>
        <groups implementation="java.lang.String">${groups}</groups>
        <includesFile implementation="java.io.File">${surefire.includesFile}</includesFile>
        <junitArtifactName implementation="java.lang.String" default-value="junit:junit">${junitArtifactName}</junitArtifactName>
        <jvm implementation="java.lang.String">${jvm}</jvm>
        <loggingLevel implementation="java.lang.String" default-value="CONFIG">${startsLogging}</loggingLevel>
        <objectFactory implementation="java.lang.String">${objectFactory}</objectFactory>
        <parallel implementation="java.lang.String">${parallel}</parallel>
        <parallelOptimized implementation="boolean" default-value="true">${parallelOptimized}</parallelOptimized>
        <parallelTestsTimeoutForcedInSeconds implementation="double">${surefire.parallel.forcedTimeout}</parallelTestsTimeoutForcedInSeconds>
        <parallelTestsTimeoutInSeconds implementation="double">${surefire.parallel.timeout}</parallelTestsTimeoutInSeconds>
        <perCoreThreadCount implementation="boolean" default-value="true">${perCoreThreadCount}</perCoreThreadCount>
        <printGraph implementation="boolean" default-value="true">${printGraph}</printGraph>
        <printSummary implementation="boolean" default-value="true">${surefire.printSummary}</printSummary>
        <redirectTestOutputToFile implementation="boolean" default-value="false">${maven.test.redirectTestOutputToFile}</redirectTestOutputToFile>
        <remoteRepositories implementation="java.util.List" default-value="${project.pluginArtifactRepositories}"/>
        <reportFormat implementation="java.lang.String" default-value="brief">${surefire.reportFormat}</reportFormat>
        <reportNameSuffix implementation="java.lang.String" default-value="">${surefire.reportNameSuffix}</reportNameSuffix>
        <reportsDirectory implementation="java.io.File" default-value="${project.build.directory}/surefire-reports"/>
        <rerunFailingTestsCount implementation="int" default-value="0">${surefire.rerunFailingTestsCount}</rerunFailingTestsCount>
        <reuseForks implementation="boolean" default-value="true">${reuseForks}</reuseForks>
        <runOrder implementation="java.lang.String" default-value="filesystem">${surefire.runOrder}</runOrder>
        <shutdown implementation="java.lang.String" default-value="testset">${surefire.shutdown}</shutdown>
        <skip implementation="boolean" default-value="false">${maven.test.skip}</skip>
        <skipAfterFailureCount implementation="int" default-value="0">${surefire.skipAfterFailureCount}</skipAfterFailureCount>
        <skipExec implementation="boolean">${maven.test.skip.exec}</skipExec>
        <skipTests implementation="boolean" default-value="false">${skipTests}</skipTests>
        <suiteXmlFiles implementation="java.io.File[]">${surefire.suiteXmlFiles}</suiteXmlFiles>
        <tempDir implementation="java.lang.String" default-value="surefire">${tempDir}</tempDir>
        <test implementation="java.lang.String">${test}</test>
        <testClassesDirectory implementation="java.io.File" default-value="${project.build.testOutputDirectory}"/>
        <testFailureIgnore implementation="boolean" default-value="false">${maven.test.failure.ignore}</testFailureIgnore>
        <testNGArtifactName implementation="java.lang.String" default-value="org.testng:testng">${testNGArtifactName}</testNGArtifactName>
        <testSourceDirectory implementation="java.io.File" default-value="${project.build.testSourceDirectory}"/>
        <threadCount implementation="int">${threadCount}</threadCount>
        <threadCountClasses implementation="int" default-value="0">${threadCountClasses}</threadCountClasses>
        <threadCountMethods implementation="int" default-value="0">${threadCountMethods}</threadCountMethods>
        <threadCountSuites implementation="int" default-value="0">${threadCountSuites}</threadCountSuites>
        <trimStackTrace implementation="boolean" default-value="true">${trimStackTrace}</trimStackTrace>
        <useFile implementation="boolean" default-value="true">${surefire.useFile}</useFile>
        <useManifestOnlyJar implementation="boolean" default-value="true">${surefire.useManifestOnlyJar}</useManifestOnlyJar>
        <useSystemClassLoader implementation="boolean" default-value="true">${surefire.useSystemClassLoader}</useSystemClassLoader>
        <useUnlimitedThreads implementation="boolean" default-value="false">${useUnlimitedThreads}</useUnlimitedThreads>
        <workingDirectory implementation="java.io.File">${basedir}</workingDirectory>
      </configuration>
    </mojo>
    <mojo>
      <goal>diff</goal>
      <description>Finds types that have changed since the last time they were analyzed.</description>
      <requiresDependencyResolution>test</requiresDependencyResolution>
      <requiresDirectInvocation>true</requiresDirectInvocation>
      <requiresProject>true</requiresProject>
      <requiresReports>false</requiresReports>
      <aggregator>false</aggregator>
      <requiresOnline>false</requiresOnline>
      <inheritedByDefault>true</inheritedByDefault>
      <executePhase>test-compile</executePhase>
      <implementation>edu.illinois.starts.jdeps.DiffMojo</implementation>
      <language>java</language>
      <instantiationStrategy>per-lookup</instantiationStrategy>
      <executionStrategy>once-per-session</executionStrategy>
      <threadSafe>false</threadSafe>
      <parameters>
        <parameter>
          <name>additionalClasspathElements</name>
          <type>java.lang.String[]</type>
          <since>2.4</since>
          <required>false</required>
          <editable>true</editable>
          <description>Additional elements to be appended to the classpath.</description>
        </parameter>
        <parameter>
          <name>argLine</name>
          <type>java.lang.String</type>
          <since>2.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>Arbitrary JVM options to set on the command line.

Since the Version 2.17 using an alternate syntax for argLine, @{...} allows late replacement of properties when the plugin is executed, so properties that have been modified by other plugins will be picked up correctly. See the Frequently Asked Questions page with more details:
http://maven.apache.org/surefire/maven-surefire-plugin/faq.html
http://maven.apache.org/surefire/maven-failsafe-plugin/faq.html</description>
        </parameter>
        <parameter>
          <name>basedir</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>The base directory of the project being tested. This can be obtained in your integration test via System.getProperty(&apos;basedir&apos;).</description>
        </parameter>
        <parameter>
          <name>childDelegation</name>
          <type>boolean</type>
          <since>2.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>When false it makes tests run using the standard classloader delegation instead of the default Maven isolated classloader. Only used when forking (forkMode is not none).
Setting it to false helps with some problems caused by conflicts between xml parsers in the classpath and the Java 5 provider parser.</description>
        </parameter>
        <parameter>
          <name>classesDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>The directory containing generated classes of the project being tested. This will be included after the test classes in the test classpath.</description>
        </parameter>
        <parameter>
          <name>classpathDependencyExcludes</name>
          <type>java.lang.String[]</type>
          <since>2.6</since>
          <required>false</required>
          <editable>true</editable>
          <description>List of dependencies to exclude from the test classpath. Each dependency string must follow the format groupId:artifactId. For example: org.acme:project-a</description>
        </parameter>
        <parameter>
          <name>classpathDependencyScopeExclude</name>
          <type>java.lang.String</type>
          <since>2.6</since>
          <required>false</required>
          <editable>true</editable>
          <description>A dependency scope to exclude from the test classpath. The scope should be one of the scopes defined by org.apache.maven.artifact.Artifact. This includes the following:

-	compile - system, provided, compile
-	runtime - compile, runtime
-	compile+runtime - system, provided, compile, runtime
-	runtime+system - system, compile, runtime
-	test - system, provided, compile, runtime, test
</description>
        </parameter>
        <parameter>
          <name>cleanBytes</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Set this to &apos;false&apos; to disable smart hashing, i.e., to *not* strip Bytecode files of debug info prior to computing checksums. See the &apos;Smart Checksums&apos; Sections in the Ekstazi paper: http://dl.acm.org/citation.cfm?id=2771784</description>
        </parameter>
        <parameter>
          <name>debugForkedProcess</name>
          <type>java.lang.String</type>
          <since>2.4</since>
          <required>false</required>
          <editable>true</editable>
          <description>Attach a debugger to the forked JVM. If set to &apos;true&apos;, the process will suspend and wait for a debugger to attach on port 5005. If set to some other string, that string will be appended to the argLine, allowing you to configure arbitrary debuggability options (without overwriting the other options specified through the argLine parameter).</description>
        </parameter>
        <parameter>
          <name>dependenciesToScan</name>
          <type>java.lang.String[]</type>
          <since>2.15</since>
          <required>false</required>
          <editable>true</editable>
          <description>List of dependencies to scan for test classes to include in the test run. The child elements of this element must be &lt;dependency&gt; elements, and the contents of each of these elements must be a string which follows the format: groupId:artifactId. For example: org.acme:project-a.</description>
        </parameter>
        <parameter>
          <name>depFormat</name>
          <type>edu.illinois.starts.enums.DependencyFormat</type>
          <required>false</required>
          <editable>true</editable>
          <description>Allows to switch the format in which we want to store the test dependencies. A full list of what we currently support can be found in</description>
        </parameter>
        <parameter>
          <name>disableXmlReport</name>
          <type>boolean</type>
          <since>2.2</since>
          <required>false</required>
          <editable>true</editable>
          <description>Flag to disable the generation of report files in xml format.</description>
        </parameter>
        <parameter>
          <name>enableAssertions</name>
          <type>boolean</type>
          <since>2.3.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>By default, Surefire enables JVM assertions for the execution of your test cases. To disable the assertions, set this flag to &apos;false&apos;.</description>
        </parameter>
        <parameter>
          <name>environmentVariables</name>
          <type>java.util.Map</type>
          <since>2.1.3</since>
          <required>false</required>
          <editable>true</editable>
          <description>Additional environment variables to set on the command line.</description>
        </parameter>
        <parameter>
          <name>excludedGroups</name>
          <type>java.lang.String</type>
          <since>2.2</since>
          <required>false</required>
          <editable>true</editable>
          <description>(TestNG/JUnit47 provider with JUnit4.8+ only) Excluded groups. Any methods/classes/etc with one of the groups specified in this list will specifically not be run.
For JUnit, this parameter forces the use of the 4.7 provider.
This parameter is ignored if the suiteXmlFiles parameter is specified.
Since version 2.18.1 and JUnit 4.12, the @Category annotation type is automatically inherited from superclasses, see @java.lang.annotation.Inherited. Make sure that test class inheritance still makes sense together with @Category annotation of the JUnit 4.12 or higher appeared in superclass.</description>
        </parameter>
        <parameter>
          <name>excludes</name>
          <type>java.util.List</type>
          <required>false</required>
          <editable>true</editable>
          <description>A list of &lt;exclude&gt; elements specifying the tests (by pattern) that should be excluded in testing. When not specified and when the test parameter is not specified, the default excludes will be

&lt;excludes&gt;
    &lt;exclude&gt;**/*$*&lt;/exclude&gt;
&lt;/excludes&gt;

(which excludes all inner classes).
This parameter is ignored if the TestNG suiteXmlFiles parameter is specified.
Each exclude item may also contain a comma-separated sub-list of items, which will be treated as multiple Â &lt;exclude&gt; entries.
Since 2.19 a complex syntax is supported in one parameter (JUnit 4, JUnit 4.7+, TestNG):
&lt;exclude&gt;%regex[pkg.*Slow.*.class], Unstable*&lt;/exclude&gt;


Notice that these values are relative to the directory containing generated test classes of the project being tested. This directory is declared by the parameter testClassesDirectory which defaults to the POM property ${project.build.testOutputDirectory}, typically src/test/java unless overridden.</description>
        </parameter>
        <parameter>
          <name>excludesFile</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>A file containing exclude patterns. Blank lines, or lines starting with # are ignored. If excludes are also specified, these patterns are appended. Example with path, simple and regex excludes:

*/test/*
**/DontRunTest.*
%regex[.*Test.*|.*Not.*]

</description>
        </parameter>
        <parameter>
          <name>failIfNoSpecifiedTests</name>
          <type>java.lang.Boolean</type>
          <since>2.12</since>
          <required>false</required>
          <editable>true</editable>
          <description>Set this to &apos;true&apos; to cause a failure if none of the tests specified in -Dtest=... are run. Defaults to &apos;true&apos;.</description>
        </parameter>
        <parameter>
          <name>failIfNoTests</name>
          <type>java.lang.Boolean</type>
          <since>2.4</since>
          <required>false</required>
          <editable>true</editable>
          <description>Set this to &apos;true&apos; to cause a failure if there are no tests to run. Defaults to &apos;false&apos;.</description>
        </parameter>
        <parameter>
          <name>filterLib</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Set this to &apos;false&apos; to not filter out &apos;sun.*&apos; and &apos;java.*&apos; classes from jdeps parsing.</description>
        </parameter>
        <parameter>
          <name>forkCount</name>
          <type>java.lang.String</type>
          <since>2.14</since>
          <required>false</required>
          <editable>true</editable>
          <description>Option to specify the number of VMs to fork in parallel in order to execute the tests. When terminated with &apos;C&apos;, the number part is multiplied with the number of CPU cores. Floating point value are only accepted together with &apos;C&apos;. If set to &apos;0&apos;, no VM is forked and all tests are executed within the main process.

Example values: &apos;1.5C&apos;, &apos;4&apos;

The system properties and the argLine of the forked processes may contain the place holder string ${surefire.forkNumber}, which is replaced with a fixed number for each of the parallel forks, ranging from 1 to the effective value of forkCount times the maximum number of parallel Surefire executions in maven parallel builds, i.e. the effective value of the -T command line argument of maven core.</description>
        </parameter>
        <parameter>
          <name>forkedProcessExitTimeoutInSeconds</name>
          <type>int</type>
          <since>2.20</since>
          <required>false</required>
          <editable>true</editable>
          <description>Forked process is normally terminated without any significant delay after given tests have completed. If the particular tests started non-daemon Thread(s), the process hangs instead of been properly terminated by System.exit(). Use this parameter in order to determine the timeout of terminating the process. see the documentation: http://maven.apache.org/surefire/maven-surefire-plugin/examples/shutdown.html Turns to default fallback value of 30 seconds if negative integer.</description>
        </parameter>
        <parameter>
          <name>forkedProcessTimeoutInSeconds</name>
          <type>int</type>
          <since>2.4</since>
          <required>false</required>
          <editable>true</editable>
          <description>Kill the forked test process after a certain number of seconds. If set to 0, wait forever for the process, never timing out.</description>
        </parameter>
        <parameter>
          <name>forkMode</name>
          <type>java.lang.String</type>
          <since>2.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>DEPRECATED since version 2.14. Use forkCount and reuseForks instead.

Option to specify the forking mode. Can be never, once, always, perthread.
The none and pertest are also accepted for backwards compatibility.
The always forks for each test-class.
The perthread creates the number of parallel forks specified by threadCount, where each forked JVM is executing one test-class. See also the parameter reuseForks for the lifetime of JVM.</description>
        </parameter>
        <parameter>
          <name>graphCache</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Path to directory that contains the result of running jdeps on third-party and standard library jars that an application may need, e.g., those in M2_REPO.</description>
        </parameter>
        <parameter>
          <name>groups</name>
          <type>java.lang.String</type>
          <since>2.2</since>
          <required>false</required>
          <editable>true</editable>
          <description>(TestNG/JUnit47 provider with JUnit4.8+ only) Groups for this test. Only classes/methods/etc decorated with one of the groups specified here will be included in test run, if specified.
For JUnit, this parameter forces the use of the 4.7 provider
This parameter is ignored if the suiteXmlFiles parameter is specified.
Since version 2.18.1 and JUnit 4.12, the @Category annotation type is automatically inherited from superclasses, see @java.lang.annotation.Inherited. Make sure that test class inheritance still makes sense together with @Category annotation of the JUnit 4.12 or higher appeared in superclass.</description>
        </parameter>
        <parameter>
          <name>includes</name>
          <type>java.util.List</type>
          <required>false</required>
          <editable>true</editable>
          <description>A list of &lt;include&gt; elements specifying the tests (by pattern) that should be included in testing. When not specified and when the test parameter is not specified, the default includes will be
&lt;includes&gt;
    &lt;include&gt;**/Test*.java&lt;/include&gt;
    &lt;include&gt;**/*Test.java&lt;/include&gt;
    &lt;include&gt;**/*Tests.java&lt;/include&gt;
    &lt;include&gt;**/*TestCase.java&lt;/include&gt;
&lt;/includes&gt;

Each include item may also contain a comma-separated sub-list of items, which will be treated as multiple Â &lt;include&gt; entries.
Since 2.19 a complex syntax is supported in one parameter (JUnit 4, JUnit 4.7+, TestNG):



&lt;include&gt;%regex[.*[Cat|Dog].*], Basic????, !Unstable*&lt;/include&gt; &lt;include&gt;%regex[.*[Cat|Dog].*], !%regex[pkg.*Slow.*.class], pkg/**/*Fast*.java&lt;/include&gt;
This parameter is ignored if the TestNG suiteXmlFiles parameter is specified.

Notice that these values are relative to the directory containing generated test classes of the project being tested. This directory is declared by the parameter testClassesDirectory which defaults to the POM property ${project.build.testOutputDirectory}, typically src/test/java unless overridden.</description>
        </parameter>
        <parameter>
          <name>includesFile</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>A file containing include patterns. Blank lines, or lines starting with # are ignored. If includes are also specified, these patterns are appended. Example with path, simple and regex includes:
*/test/*
**/NotIncludedByDefault.java
%regex[.*Test.*|.*Not.*]

</description>
        </parameter>
        <parameter>
          <name>junitArtifactName</name>
          <type>java.lang.String</type>
          <since>2.3.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>Allows you to specify the name of the JUnit artifact. If not set, junit:junit will be used.</description>
        </parameter>
        <parameter>
          <name>jvm</name>
          <type>java.lang.String</type>
          <since>2.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>Option to specify the jvm (or path to the java executable) to use with the forking options. For the default, the jvm will be a new instance of the same VM as the one used to run Maven. JVM settings are not inherited from MAVEN_OPTS.</description>
        </parameter>
        <parameter>
          <name>loggingLevel</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Log levels as defined in java.util.logging.Level.</description>
        </parameter>
        <parameter>
          <name>objectFactory</name>
          <type>java.lang.String</type>
          <since>2.5</since>
          <required>false</required>
          <editable>true</editable>
          <description>(TestNG only) Define the factory class used to create all test instances.</description>
        </parameter>
        <parameter>
          <name>parallel</name>
          <type>java.lang.String</type>
          <since>2.2</since>
          <required>false</required>
          <editable>true</editable>
          <description>(TestNG provider) When you use the parameter parallel, TestNG will try to run all your test methods in separate threads, except for methods that depend on each other, which will be run in the same thread in order to respect their order of execution.
(JUnit 4.7 provider) Supports values classes, methods, both to run in separate threads been controlled by threadCount.

Since version 2.16 (JUnit 4.7 provider), the value both is DEPRECATED. Use classesAndMethods instead.

Since version 2.16 (JUnit 4.7 provider), additional vales are available:
suites, suitesAndClasses, suitesAndMethods, classesAndMethods, all.</description>
        </parameter>
        <parameter>
          <name>parallelOptimized</name>
          <type>boolean</type>
          <since>2.17</since>
          <required>false</required>
          <editable>true</editable>
          <description>(JUnit 4.7 / provider only) The thread counts do not exceed the number of parallel suite, class runners and average number of methods per class if set to true.
True by default.</description>
        </parameter>
        <parameter>
          <name>parallelTestsTimeoutForcedInSeconds</name>
          <type>double</type>
          <since>2.16</since>
          <required>false</required>
          <editable>true</editable>
          <description>Stop executing queued parallel JUnit tests and interrupt currently running tests after a certain number of seconds.
Example values: &apos;3.5&apos;, &apos;4&apos;

If set to 0, wait forever, never timing out. Makes sense with specified parallel different from &apos;none&apos;.</description>
        </parameter>
        <parameter>
          <name>parallelTestsTimeoutInSeconds</name>
          <type>double</type>
          <since>2.16</since>
          <required>false</required>
          <editable>true</editable>
          <description>Stop executing queued parallel JUnit tests after a certain number of seconds.
Example values: &apos;3.5&apos;, &apos;4&apos;

If set to 0, wait forever, never timing out. Makes sense with specified parallel different from &apos;none&apos;.</description>
        </parameter>
        <parameter>
          <name>perCoreThreadCount</name>
          <type>boolean</type>
          <since>2.5</since>
          <required>false</required>
          <editable>true</editable>
          <description>(JUnit 4.7 provider) Indicates that threadCount, threadCountSuites, threadCountClasses, threadCountMethods are per cpu core.</description>
        </parameter>
        <parameter>
          <name>printGraph</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Set this to &apos;false&apos; to not print the graph obtained from jdeps parsing. When &apos;true&apos; the graph is written to file after the run.</description>
        </parameter>
        <parameter>
          <name>printSummary</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Option to print summary of test suites or just print the test cases that have errors.</description>
        </parameter>
        <parameter>
          <name>properties</name>
          <type>java.util.Properties</type>
          <since>2.4</since>
          <required>false</required>
          <editable>true</editable>
          <description>List of properties for configuring all TestNG related configurations. This is the new preferred method of configuring TestNG.</description>
        </parameter>
        <parameter>
          <name>redirectTestOutputToFile</name>
          <type>boolean</type>
          <since>2.3</since>
          <required>false</required>
          <editable>true</editable>
          <description>Set this to &apos;true&apos; to redirect the unit test standard output to a file (found in reportsDirectory/testName-output.txt).</description>
        </parameter>
        <parameter>
          <name>remoteRepositories</name>
          <type>java.util.List</type>
          <since>2.2</since>
          <required>false</required>
          <editable>true</editable>
          <description>The remote plugin repositories declared in the POM.</description>
        </parameter>
        <parameter>
          <name>reportFormat</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Selects the formatting for the test report to be generated. Can be set as &apos;brief&apos; or &apos;plain&apos;. Only applies to the output format of the output files (target/surefire-reports/testName.txt)</description>
        </parameter>
        <parameter>
          <name>reportNameSuffix</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Add custom text into report filename: TEST-testClassName-reportNameSuffix.xml, testClassName-reportNameSuffix.txt and testClassName-reportNameSuffix-output.txt. File TEST-testClassName-reportNameSuffix.xml has changed attributes &apos;testsuite&apos;--&apos;name&apos; and &apos;testcase&apos;--&apos;classname&apos; - reportNameSuffix is added to the attribute value.</description>
        </parameter>
        <parameter>
          <name>reportsDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>Base directory where all reports are written to.</description>
        </parameter>
        <parameter>
          <name>rerunFailingTestsCount</name>
          <type>int</type>
          <required>false</required>
          <editable>true</editable>
          <description>(JUnit 4+ providers) The number of times each failing test will be rerun. If set larger than 0, rerun failing tests immediately after they fail. If a failing test passes in any of those reruns, it will be marked as pass and reported as a &apos;flake&apos;. However, all the failing attempts will be recorded.</description>
        </parameter>
        <parameter>
          <name>reuseForks</name>
          <type>boolean</type>
          <since>2.13</since>
          <required>false</required>
          <editable>true</editable>
          <description>Indicates if forked VMs can be reused. If set to &apos;false&apos;, a new VM is forked for each test class to be executed. If set to &apos;true&apos;, up to forkCount VMs will be forked and then reused to execute all tests.</description>
        </parameter>
        <parameter>
          <name>runOrder</name>
          <type>java.lang.String</type>
          <since>2.7</since>
          <required>false</required>
          <editable>true</editable>
          <description>Defines the order the tests will be run in. Supported values are alphabetical, reversealphabetical, random, hourly (alphabetical on even hours, reverse alphabetical on odd hours), failedfirst, balanced and filesystem.

Odd/Even for hourly is determined at the time the of scanning the classpath, meaning it could change during a multi-module build.

Failed first will run tests that failed on previous run first, as well as new tests for this run.

Balanced is only relevant with parallel=classes, and will try to optimize the run-order of the tests reducing the overall execution time. Initially a statistics file is created and every next test run will reorder classes.

Note that the statistics are stored in a file named .surefire-XXXXXXXXX beside pom.xml and should not be checked into version control. The &apos;XXXXX&apos; is the SHA1 checksum of the entire surefire configuration, so different configurations will have different statistics files, meaning if you change any configuration settings you will re-run once before new statistics data can be established.</description>
        </parameter>
        <parameter>
          <name>shutdown</name>
          <type>java.lang.String</type>
          <since>2.19</since>
          <required>false</required>
          <editable>true</editable>
          <description>After the plugin process is shutdown by sending SIGTERM signal (CTRL+C), SHUTDOWN command is received by every forked JVM.
By default (shutdown=testset) forked JVM would not continue with new test which means that the current test may still continue to run.
The parameter can be configured with other two values exit and kill.
Using exit forked JVM executes System.exit(1) after the plugin process has received SIGTERM signal.
Using kill the JVM executes Runtime.halt(1) and kills itself.</description>
        </parameter>
        <parameter>
          <name>skip</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Set this to &apos;true&apos; to bypass unit tests entirely. Its use is NOT RECOMMENDED, especially if you enable it using the &apos;maven.test.skip&apos; property, because maven.test.skip disables both running the tests and compiling the tests. Consider using the skipTests parameter instead.</description>
        </parameter>
        <parameter>
          <name>skipAfterFailureCount</name>
          <type>int</type>
          <since>2.19</since>
          <required>false</required>
          <editable>true</editable>
          <description>Set to error/failure count in order to skip remaining tests. Due to race conditions in parallel/forked execution this may not be fully guaranteed.
Enable with system property -Dsurefire.skipAfterFailureCount=1 or any number greater than zero. Defaults to &apos;0&apos;.
See the prerequisites and limitations in documentation:
http://maven.apache.org/plugins/maven-surefire-plugin/examples/skip-after-failure.html</description>
        </parameter>
        <parameter>
          <name>skipExec</name>
          <type>boolean</type>
          <since>2.3</since>
          <deprecated>Use skipTests instead.</deprecated>
          <required>false</required>
          <editable>true</editable>
          <description>This old parameter is just like skipTests, but bound to the old property &apos;maven.test.skip.exec&apos;.</description>
        </parameter>
        <parameter>
          <name>skipTests</name>
          <type>boolean</type>
          <since>2.4</since>
          <required>false</required>
          <editable>true</editable>
          <description>Set this to &apos;true&apos; to skip running tests, but still compile them. Its use is NOT RECOMMENDED, but quite convenient on occasion.</description>
        </parameter>
        <parameter>
          <name>suiteXmlFiles</name>
          <type>java.io.File[]</type>
          <since>2.2</since>
          <required>false</required>
          <editable>true</editable>
          <description>(TestNG) List of &lt;suiteXmlFile&gt; elements specifying TestNG suite xml file locations. Note that suiteXmlFiles is incompatible with several other parameters of this plugin, like includes and excludes.
This parameter is ignored if the test parameter is specified (allowing you to run a single test instead of an entire suite).</description>
        </parameter>
        <parameter>
          <name>systemProperties</name>
          <type>java.util.Properties</type>
          <deprecated>Use systemPropertyVariables instead.</deprecated>
          <required>false</required>
          <editable>true</editable>
          <description>List of System properties to pass to the JUnit tests.</description>
        </parameter>
        <parameter>
          <name>systemPropertiesFile</name>
          <type>java.io.File</type>
          <since>2.8.2</since>
          <required>false</required>
          <editable>true</editable>
          <description>List of System properties, loaded from a file, to pass to the JUnit tests.</description>
        </parameter>
        <parameter>
          <name>systemPropertyVariables</name>
          <type>java.util.Map</type>
          <since>2.5</since>
          <required>false</required>
          <editable>true</editable>
          <description>List of System properties to pass to the JUnit tests.</description>
        </parameter>
        <parameter>
          <name>tempDir</name>
          <type>java.lang.String</type>
          <since>2.20</since>
          <required>false</required>
          <editable>true</editable>
          <description>Relative path to temporary-surefire-boot directory containing internal Surefire temporary files.
The temporary-surefire-boot directory is project.build.directory on most platforms or system default temporary-directory specified by the system property java.io.tmpdir on Windows (see SUREFIRE-1400).
It is deleted after the test set has completed.</description>
        </parameter>
        <parameter>
          <name>test</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specify this parameter to run individual tests by file name, overriding the parameter includes and excludes. Each pattern you specify here will be used to create an include pattern formatted like **/${test}.java, so you can just type -Dtest=MyTest to run a single test called &apos;foo/MyTest.java&apos;. The test patterns prefixed with a ! will be excluded.
This parameter overrides the parameter includes, excludes, and the TestNG parameter suiteXmlFiles.
Since 2.7.3, you can execute a limited number of methods in the test by adding #myMethod or #my*ethod. For example, -Dtest=MyTest#myMethod. This is supported for junit 4.x and TestNg.

Since 2.19 a complex syntax is supported in one parameter (JUnit 4, JUnit 4.7+, TestNG):
&apos;-Dtest=???Test, !Unstable*, pkg/**/Ci*leTest.java, *Test#test*One+testTwo?????, #fast*+slowTest&apos;

or e.g.
&apos;-Dtest=Basic*, !%regex[.*.Unstable.*], !%regex[.*.MyTest.class#one.*|two.*], %regex[#fast.*|slow.*]&apos;


The Parameterized JUnit runner describes test methods using an index in brackets, so the non-regex method pattern would become: #testMethod[*]. If using @Parameters(name=&apos;{index}: fib({0})={1}&apos;) and selecting the index e.g. 5 in pattern, the non-regex method pattern would become #testMethod[5:*].</description>
        </parameter>
        <parameter>
          <name>testClassesDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>The directory containing generated test classes of the project being tested. This will be included at the beginning of the test classpath. *</description>
        </parameter>
        <parameter>
          <name>testFailureIgnore</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Set this to &apos;true&apos; to ignore a failure during testing. Its use is NOT RECOMMENDED, but quite convenient on occasion.</description>
        </parameter>
        <parameter>
          <name>testNGArtifactName</name>
          <type>java.lang.String</type>
          <since>2.3.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>Allows you to specify the name of the TestNG artifact. If not set, org.testng:testng will be used.</description>
        </parameter>
        <parameter>
          <name>testSourceDirectory</name>
          <type>java.io.File</type>
          <since>2.2</since>
          <required>true</required>
          <editable>true</editable>
          <description>The test source directory containing test class sources.</description>
        </parameter>
        <parameter>
          <name>threadCount</name>
          <type>int</type>
          <since>2.2</since>
          <required>false</required>
          <editable>true</editable>
          <description>(TestNG/JUnit 4.7 provider) The attribute thread-count allows you to specify how many threads should be allocated for this execution. Only makes sense to use in conjunction with the parallel parameter.</description>
        </parameter>
        <parameter>
          <name>threadCountClasses</name>
          <type>int</type>
          <since>2.16</since>
          <required>false</required>
          <editable>true</editable>
          <description>(JUnit 4.7 provider) This attribute allows you to specify the concurrency in test classes, i.e.:
-	number of concurrent classes if threadCount is 0 or unspecified
-	limited classes concurrency if useUnlimitedThreads is set to true
-	if threadCount and certain thread-count parameters are &gt; 0 for parallel, the concurrency is computed from ratio. For instance parallel=all and the ratio between threadCountSuites:threadCountClasses:threadCountMethods is 2:3:5, there is 30% of threadCount in concurrent classes.
-	as in the previous case but without this leaf thread-count. Example: parallel=suitesAndClasses, threadCount=16, threadCountSuites=5, threadCountClasses is unspecified leaf, the number of concurrent classes is varying from &gt;= 11 to 14 or 15. The threadCountSuites become given number of threads.
Only makes sense to use in conjunction with the parallel parameter. The default value 0 behaves same as unspecified one.</description>
        </parameter>
        <parameter>
          <name>threadCountMethods</name>
          <type>int</type>
          <since>2.16</since>
          <required>false</required>
          <editable>true</editable>
          <description>(JUnit 4.7 provider) This attribute allows you to specify the concurrency in test methods, i.e.:
-	number of concurrent methods if threadCount is 0 or unspecified
-	limited concurrency of methods if useUnlimitedThreads is set to true
-	if threadCount and certain thread-count parameters are &gt; 0 for parallel, the concurrency is computed from ratio. For instance parallel=all and the ratio between threadCountSuites:threadCountClasses:threadCountMethods is 2:3:5, there is 50% of threadCount which appears in concurrent methods.
-	as in the previous case but without this leaf thread-count. Example: parallel=all, threadCount=16, threadCountSuites=2, threadCountClasses=3, but threadCountMethods is unspecified leaf, the number of concurrent methods is varying from &gt;= 11 to 14 or 15. The threadCountSuites and threadCountClasses become given number of threads.
Only makes sense to use in conjunction with the parallel parameter. The default value 0 behaves same as unspecified one.</description>
        </parameter>
        <parameter>
          <name>threadCountSuites</name>
          <type>int</type>
          <since>2.16</since>
          <required>false</required>
          <editable>true</editable>
          <description>(JUnit 4.7 provider) This attribute allows you to specify the concurrency in test suites, i.e.:
-	number of concurrent suites if threadCount is 0 or unspecified
-	limited suites concurrency if useUnlimitedThreads is set to true
-	if threadCount and certain thread-count parameters are &gt; 0 for parallel, the concurrency is computed from ratio. For instance parallel=all and the ratio between threadCountSuites:threadCountClasses:threadCountMethods is 2:3:5, there is 20% of threadCount which appeared in concurrent suites.
Only makes sense to use in conjunction with the parallel parameter. The default value 0 behaves same as unspecified one.</description>
        </parameter>
        <parameter>
          <name>trimStackTrace</name>
          <type>boolean</type>
          <since>2.2</since>
          <required>false</required>
          <editable>true</editable>
          <description>Whether to trim the stack trace in the reports to just the lines within the test, or show the full trace.</description>
        </parameter>
        <parameter>
          <name>updateDiffChecksums</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Set this to &apos;true&apos; to update test dependencies on disk. The default value of &apos;false&apos; is useful for &apos;dry runs&apos; where one may want to see the diff without updating the test dependencies.</description>
        </parameter>
        <parameter>
          <name>useFile</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Option to generate a file test report or just output the test report to the console.</description>
        </parameter>
        <parameter>
          <name>useManifestOnlyJar</name>
          <type>boolean</type>
          <since>2.4.3</since>
          <required>false</required>
          <editable>true</editable>
          <description>By default, Surefire forks your tests using a manifest-only JAR; set this parameter to &apos;false&apos; to force it to launch your tests with a plain old Java classpath. (See the http://maven.apache.org/plugins/maven-surefire-plugin/examples/class-loading.html for a more detailed explanation of manifest-only JARs and their benefits.)
Beware, setting this to &apos;false&apos; may cause your tests to fail on Windows if your classpath is too long.</description>
        </parameter>
        <parameter>
          <name>useSystemClassLoader</name>
          <type>boolean</type>
          <since>2.3</since>
          <required>false</required>
          <editable>true</editable>
          <description>Option to pass dependencies to the system&apos;s classloader instead of using an isolated class loader when forking. Prevents problems with JDKs which implement the service provider lookup mechanism by using the system&apos;s ClassLoader.</description>
        </parameter>
        <parameter>
          <name>useUnlimitedThreads</name>
          <type>boolean</type>
          <since>2.5</since>
          <required>false</required>
          <editable>true</editable>
          <description>(JUnit 4.7 provider) Indicates that the thread pool will be unlimited. The parallel parameter and the actual number of classes/methods will decide. Setting this to &apos;true&apos; effectively disables perCoreThreadCount and threadCount. Defaults to &apos;false&apos;.</description>
        </parameter>
        <parameter>
          <name>workingDirectory</name>
          <type>java.io.File</type>
          <since>2.1.3</since>
          <required>false</required>
          <editable>true</editable>
          <description>Command line working directory.</description>
        </parameter>
      </parameters>
      <configuration>
        <additionalClasspathElements implementation="java.lang.String[]">${maven.test.additionalClasspath}</additionalClasspathElements>
        <argLine implementation="java.lang.String">${argLine}</argLine>
        <basedir implementation="java.io.File" default-value="${basedir}"/>
        <childDelegation implementation="boolean" default-value="false">${childDelegation}</childDelegation>
        <classesDirectory implementation="java.io.File" default-value="${project.build.outputDirectory}"/>
        <classpathDependencyExcludes implementation="java.lang.String[]">${maven.test.dependency.excludes}</classpathDependencyExcludes>
        <cleanBytes implementation="boolean" default-value="true">${cleanBytes}</cleanBytes>
        <debugForkedProcess implementation="java.lang.String">${maven.surefire.debug}</debugForkedProcess>
        <dependenciesToScan implementation="java.lang.String[]">${dependenciesToScan}</dependenciesToScan>
        <depFormat implementation="edu.illinois.starts.enums.DependencyFormat" default-value="ZLC">${depFormat}</depFormat>
        <disableXmlReport implementation="boolean" default-value="false">${disableXmlReport}</disableXmlReport>
        <enableAssertions implementation="boolean" default-value="true">${enableAssertions}</enableAssertions>
        <excludedGroups implementation="java.lang.String">${excludedGroups}</excludedGroups>
        <excludesFile implementation="java.io.File">${surefire.excludesFile}</excludesFile>
        <failIfNoSpecifiedTests implementation="java.lang.Boolean">${surefire.failIfNoSpecifiedTests}</failIfNoSpecifiedTests>
        <failIfNoTests implementation="java.lang.Boolean">${failIfNoTests}</failIfNoTests>
        <filterLib implementation="boolean" default-value="false">${filterLib}</filterLib>
        <forkCount implementation="java.lang.String" default-value="1">${forkCount}</forkCount>
        <forkedProcessExitTimeoutInSeconds implementation="int" default-value="30">${surefire.exitTimeout}</forkedProcessExitTimeoutInSeconds>
        <forkedProcessTimeoutInSeconds implementation="int">${surefire.timeout}</forkedProcessTimeoutInSeconds>
        <forkMode implementation="java.lang.String" default-value="once">${forkMode}</forkMode>
        <graphCache implementation="java.lang.String" default-value="${basedir}${file.separator}jdeps-cache">${gCache}</graphCache>
        <groups implementation="java.lang.String">${groups}</groups>
        <includesFile implementation="java.io.File">${surefire.includesFile}</includesFile>
        <junitArtifactName implementation="java.lang.String" default-value="junit:junit">${junitArtifactName}</junitArtifactName>
        <jvm implementation="java.lang.String">${jvm}</jvm>
        <loggingLevel implementation="java.lang.String" default-value="CONFIG">${startsLogging}</loggingLevel>
        <objectFactory implementation="java.lang.String">${objectFactory}</objectFactory>
        <parallel implementation="java.lang.String">${parallel}</parallel>
        <parallelOptimized implementation="boolean" default-value="true">${parallelOptimized}</parallelOptimized>
        <parallelTestsTimeoutForcedInSeconds implementation="double">${surefire.parallel.forcedTimeout}</parallelTestsTimeoutForcedInSeconds>
        <parallelTestsTimeoutInSeconds implementation="double">${surefire.parallel.timeout}</parallelTestsTimeoutInSeconds>
        <perCoreThreadCount implementation="boolean" default-value="true">${perCoreThreadCount}</perCoreThreadCount>
        <printGraph implementation="boolean" default-value="true">${printGraph}</printGraph>
        <printSummary implementation="boolean" default-value="true">${surefire.printSummary}</printSummary>
        <redirectTestOutputToFile implementation="boolean" default-value="false">${maven.test.redirectTestOutputToFile}</redirectTestOutputToFile>
        <remoteRepositories implementation="java.util.List" default-value="${project.pluginArtifactRepositories}"/>
        <reportFormat implementation="java.lang.String" default-value="brief">${surefire.reportFormat}</reportFormat>
        <reportNameSuffix implementation="java.lang.String" default-value="">${surefire.reportNameSuffix}</reportNameSuffix>
        <reportsDirectory implementation="java.io.File" default-value="${project.build.directory}/surefire-reports"/>
        <rerunFailingTestsCount implementation="int" default-value="0">${surefire.rerunFailingTestsCount}</rerunFailingTestsCount>
        <reuseForks implementation="boolean" default-value="true">${reuseForks}</reuseForks>
        <runOrder implementation="java.lang.String" default-value="filesystem">${surefire.runOrder}</runOrder>
        <shutdown implementation="java.lang.String" default-value="testset">${surefire.shutdown}</shutdown>
        <skip implementation="boolean" default-value="false">${maven.test.skip}</skip>
        <skipAfterFailureCount implementation="int" default-value="0">${surefire.skipAfterFailureCount}</skipAfterFailureCount>
        <skipExec implementation="boolean">${maven.test.skip.exec}</skipExec>
        <skipTests implementation="boolean" default-value="false">${skipTests}</skipTests>
        <suiteXmlFiles implementation="java.io.File[]">${surefire.suiteXmlFiles}</suiteXmlFiles>
        <tempDir implementation="java.lang.String" default-value="surefire">${tempDir}</tempDir>
        <test implementation="java.lang.String">${test}</test>
        <testClassesDirectory implementation="java.io.File" default-value="${project.build.testOutputDirectory}"/>
        <testFailureIgnore implementation="boolean" default-value="false">${maven.test.failure.ignore}</testFailureIgnore>
        <testNGArtifactName implementation="java.lang.String" default-value="org.testng:testng">${testNGArtifactName}</testNGArtifactName>
        <testSourceDirectory implementation="java.io.File" default-value="${project.build.testSourceDirectory}"/>
        <threadCount implementation="int">${threadCount}</threadCount>
        <threadCountClasses implementation="int" default-value="0">${threadCountClasses}</threadCountClasses>
        <threadCountMethods implementation="int" default-value="0">${threadCountMethods}</threadCountMethods>
        <threadCountSuites implementation="int" default-value="0">${threadCountSuites}</threadCountSuites>
        <trimStackTrace implementation="boolean" default-value="true">${trimStackTrace}</trimStackTrace>
        <updateDiffChecksums implementation="boolean" default-value="false">${updateDiffChecksums}</updateDiffChecksums>
        <useFile implementation="boolean" default-value="true">${surefire.useFile}</useFile>
        <useManifestOnlyJar implementation="boolean" default-value="true">${surefire.useManifestOnlyJar}</useManifestOnlyJar>
        <useSystemClassLoader implementation="boolean" default-value="true">${surefire.useSystemClassLoader}</useSystemClassLoader>
        <useUnlimitedThreads implementation="boolean" default-value="false">${useUnlimitedThreads}</useUnlimitedThreads>
        <workingDirectory implementation="java.io.File">${basedir}</workingDirectory>
      </configuration>
    </mojo>
    <mojo>
      <goal>help</goal>
      <description>Display help information on starts-maven-plugin.
Call mvn starts:help -Ddetail=true -Dgoal=&lt;goal-name&gt; to display parameter details.</description>
      <requiresDirectInvocation>false</requiresDirectInvocation>
      <requiresProject>false</requiresProject>
      <requiresReports>false</requiresReports>
      <aggregator>false</aggregator>
      <requiresOnline>false</requiresOnline>
      <inheritedByDefault>true</inheritedByDefault>
      <implementation>edu.illinois.starts.jdeps.HelpMojo</implementation>
      <language>java</language>
      <instantiationStrategy>per-lookup</instantiationStrategy>
      <executionStrategy>once-per-session</executionStrategy>
      <threadSafe>true</threadSafe>
      <parameters>
        <parameter>
          <name>detail</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>If true, display all settable properties for each goal.</description>
        </parameter>
        <parameter>
          <name>goal</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>The name of the goal for which to show help. If unspecified, all goals will be displayed.</description>
        </parameter>
        <parameter>
          <name>indentSize</name>
          <type>int</type>
          <required>false</required>
          <editable>true</editable>
          <description>The number of spaces per indentation level, should be positive.</description>
        </parameter>
        <parameter>
          <name>lineLength</name>
          <type>int</type>
          <required>false</required>
          <editable>true</editable>
          <description>The maximum length of a display line, should be positive.</description>
        </parameter>
      </parameters>
      <configuration>
        <detail implementation="boolean" default-value="false">${detail}</detail>
        <goal implementation="java.lang.String">${goal}</goal>
        <indentSize implementation="int" default-value="2">${indentSize}</indentSize>
        <lineLength implementation="int" default-value="80">${lineLength}</lineLength>
      </configuration>
    </mojo>
    <mojo>
      <goal>impacted</goal>
      <description>Find all types that are impacted by a change.</description>
      <requiresDependencyResolution>test</requiresDependencyResolution>
      <requiresDirectInvocation>true</requiresDirectInvocation>
      <requiresProject>true</requiresProject>
      <requiresReports>false</requiresReports>
      <aggregator>false</aggregator>
      <requiresOnline>false</requiresOnline>
      <inheritedByDefault>true</inheritedByDefault>
      <executePhase>test-compile</executePhase>
      <implementation>edu.illinois.starts.jdeps.ImpactedMojo</implementation>
      <language>java</language>
      <instantiationStrategy>per-lookup</instantiationStrategy>
      <executionStrategy>once-per-session</executionStrategy>
      <threadSafe>false</threadSafe>
      <parameters>
        <parameter>
          <name>additionalClasspathElements</name>
          <type>java.lang.String[]</type>
          <since>2.4</since>
          <required>false</required>
          <editable>true</editable>
          <description>Additional elements to be appended to the classpath.</description>
        </parameter>
        <parameter>
          <name>argLine</name>
          <type>java.lang.String</type>
          <since>2.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>Arbitrary JVM options to set on the command line.

Since the Version 2.17 using an alternate syntax for argLine, @{...} allows late replacement of properties when the plugin is executed, so properties that have been modified by other plugins will be picked up correctly. See the Frequently Asked Questions page with more details:
http://maven.apache.org/surefire/maven-surefire-plugin/faq.html
http://maven.apache.org/surefire/maven-failsafe-plugin/faq.html</description>
        </parameter>
        <parameter>
          <name>basedir</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>The base directory of the project being tested. This can be obtained in your integration test via System.getProperty(&apos;basedir&apos;).</description>
        </parameter>
        <parameter>
          <name>childDelegation</name>
          <type>boolean</type>
          <since>2.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>When false it makes tests run using the standard classloader delegation instead of the default Maven isolated classloader. Only used when forking (forkMode is not none).
Setting it to false helps with some problems caused by conflicts between xml parsers in the classpath and the Java 5 provider parser.</description>
        </parameter>
        <parameter>
          <name>classesDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>The directory containing generated classes of the project being tested. This will be included after the test classes in the test classpath.</description>
        </parameter>
        <parameter>
          <name>classpathDependencyExcludes</name>
          <type>java.lang.String[]</type>
          <since>2.6</since>
          <required>false</required>
          <editable>true</editable>
          <description>List of dependencies to exclude from the test classpath. Each dependency string must follow the format groupId:artifactId. For example: org.acme:project-a</description>
        </parameter>
        <parameter>
          <name>classpathDependencyScopeExclude</name>
          <type>java.lang.String</type>
          <since>2.6</since>
          <required>false</required>
          <editable>true</editable>
          <description>A dependency scope to exclude from the test classpath. The scope should be one of the scopes defined by org.apache.maven.artifact.Artifact. This includes the following:

-	compile - system, provided, compile
-	runtime - compile, runtime
-	compile+runtime - system, provided, compile, runtime
-	runtime+system - system, compile, runtime
-	test - system, provided, compile, runtime, test
</description>
        </parameter>
        <parameter>
          <name>cleanBytes</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Set this to &apos;false&apos; to disable smart hashing, i.e., to *not* strip Bytecode files of debug info prior to computing checksums. See the &apos;Smart Checksums&apos; Sections in the Ekstazi paper: http://dl.acm.org/citation.cfm?id=2771784</description>
        </parameter>
        <parameter>
          <name>debugForkedProcess</name>
          <type>java.lang.String</type>
          <since>2.4</since>
          <required>false</required>
          <editable>true</editable>
          <description>Attach a debugger to the forked JVM. If set to &apos;true&apos;, the process will suspend and wait for a debugger to attach on port 5005. If set to some other string, that string will be appended to the argLine, allowing you to configure arbitrary debuggability options (without overwriting the other options specified through the argLine parameter).</description>
        </parameter>
        <parameter>
          <name>dependenciesToScan</name>
          <type>java.lang.String[]</type>
          <since>2.15</since>
          <required>false</required>
          <editable>true</editable>
          <description>List of dependencies to scan for test classes to include in the test run. The child elements of this element must be &lt;dependency&gt; elements, and the contents of each of these elements must be a string which follows the format: groupId:artifactId. For example: org.acme:project-a.</description>
        </parameter>
        <parameter>
          <name>depFormat</name>
          <type>edu.illinois.starts.enums.DependencyFormat</type>
          <required>false</required>
          <editable>true</editable>
          <description>Allows to switch the format in which we want to store the test dependencies. A full list of what we currently support can be found in</description>
        </parameter>
        <parameter>
          <name>disableXmlReport</name>
          <type>boolean</type>
          <since>2.2</since>
          <required>false</required>
          <editable>true</editable>
          <description>Flag to disable the generation of report files in xml format.</description>
        </parameter>
        <parameter>
          <name>enableAssertions</name>
          <type>boolean</type>
          <since>2.3.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>By default, Surefire enables JVM assertions for the execution of your test cases. To disable the assertions, set this flag to &apos;false&apos;.</description>
        </parameter>
        <parameter>
          <name>environmentVariables</name>
          <type>java.util.Map</type>
          <since>2.1.3</since>
          <required>false</required>
          <editable>true</editable>
          <description>Additional environment variables to set on the command line.</description>
        </parameter>
        <parameter>
          <name>excludedGroups</name>
          <type>java.lang.String</type>
          <since>2.2</since>
          <required>false</required>
          <editable>true</editable>
          <description>(TestNG/JUnit47 provider with JUnit4.8+ only) Excluded groups. Any methods/classes/etc with one of the groups specified in this list will specifically not be run.
For JUnit, this parameter forces the use of the 4.7 provider.
This parameter is ignored if the suiteXmlFiles parameter is specified.
Since version 2.18.1 and JUnit 4.12, the @Category annotation type is automatically inherited from superclasses, see @java.lang.annotation.Inherited. Make sure that test class inheritance still makes sense together with @Category annotation of the JUnit 4.12 or higher appeared in superclass.</description>
        </parameter>
        <parameter>
          <name>excludes</name>
          <type>java.util.List</type>
          <required>false</required>
          <editable>true</editable>
          <description>A list of &lt;exclude&gt; elements specifying the tests (by pattern) that should be excluded in testing. When not specified and when the test parameter is not specified, the default excludes will be

&lt;excludes&gt;
    &lt;exclude&gt;**/*$*&lt;/exclude&gt;
&lt;/excludes&gt;

(which excludes all inner classes).
This parameter is ignored if the TestNG suiteXmlFiles parameter is specified.
Each exclude item may also contain a comma-separated sub-list of items, which will be treated as multiple Â &lt;exclude&gt; entries.
Since 2.19 a complex syntax is supported in one parameter (JUnit 4, JUnit 4.7+, TestNG):
&lt;exclude&gt;%regex[pkg.*Slow.*.class], Unstable*&lt;/exclude&gt;


Notice that these values are relative to the directory containing generated test classes of the project being tested. This directory is declared by the parameter testClassesDirectory which defaults to the POM property ${project.build.testOutputDirectory}, typically src/test/java unless overridden.</description>
        </parameter>
        <parameter>
          <name>excludesFile</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>A file containing exclude patterns. Blank lines, or lines starting with # are ignored. If excludes are also specified, these patterns are appended. Example with path, simple and regex excludes:

*/test/*
**/DontRunTest.*
%regex[.*Test.*|.*Not.*]

</description>
        </parameter>
        <parameter>
          <name>failIfNoSpecifiedTests</name>
          <type>java.lang.Boolean</type>
          <since>2.12</since>
          <required>false</required>
          <editable>true</editable>
          <description>Set this to &apos;true&apos; to cause a failure if none of the tests specified in -Dtest=... are run. Defaults to &apos;true&apos;.</description>
        </parameter>
        <parameter>
          <name>failIfNoTests</name>
          <type>java.lang.Boolean</type>
          <since>2.4</since>
          <required>false</required>
          <editable>true</editable>
          <description>Set this to &apos;true&apos; to cause a failure if there are no tests to run. Defaults to &apos;false&apos;.</description>
        </parameter>
        <parameter>
          <name>filterLib</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Set this to &apos;false&apos; to not filter out &apos;sun.*&apos; and &apos;java.*&apos; classes from jdeps parsing.</description>
        </parameter>
        <parameter>
          <name>forkCount</name>
          <type>java.lang.String</type>
          <since>2.14</since>
          <required>false</required>
          <editable>true</editable>
          <description>Option to specify the number of VMs to fork in parallel in order to execute the tests. When terminated with &apos;C&apos;, the number part is multiplied with the number of CPU cores. Floating point value are only accepted together with &apos;C&apos;. If set to &apos;0&apos;, no VM is forked and all tests are executed within the main process.

Example values: &apos;1.5C&apos;, &apos;4&apos;

The system properties and the argLine of the forked processes may contain the place holder string ${surefire.forkNumber}, which is replaced with a fixed number for each of the parallel forks, ranging from 1 to the effective value of forkCount times the maximum number of parallel Surefire executions in maven parallel builds, i.e. the effective value of the -T command line argument of maven core.</description>
        </parameter>
        <parameter>
          <name>forkedProcessExitTimeoutInSeconds</name>
          <type>int</type>
          <since>2.20</since>
          <required>false</required>
          <editable>true</editable>
          <description>Forked process is normally terminated without any significant delay after given tests have completed. If the particular tests started non-daemon Thread(s), the process hangs instead of been properly terminated by System.exit(). Use this parameter in order to determine the timeout of terminating the process. see the documentation: http://maven.apache.org/surefire/maven-surefire-plugin/examples/shutdown.html Turns to default fallback value of 30 seconds if negative integer.</description>
        </parameter>
        <parameter>
          <name>forkedProcessTimeoutInSeconds</name>
          <type>int</type>
          <since>2.4</since>
          <required>false</required>
          <editable>true</editable>
          <description>Kill the forked test process after a certain number of seconds. If set to 0, wait forever for the process, never timing out.</description>
        </parameter>
        <parameter>
          <name>forkMode</name>
          <type>java.lang.String</type>
          <since>2.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>DEPRECATED since version 2.14. Use forkCount and reuseForks instead.

Option to specify the forking mode. Can be never, once, always, perthread.
The none and pertest are also accepted for backwards compatibility.
The always forks for each test-class.
The perthread creates the number of parallel forks specified by threadCount, where each forked JVM is executing one test-class. See also the parameter reuseForks for the lifetime of JVM.</description>
        </parameter>
        <parameter>
          <name>graphCache</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Path to directory that contains the result of running jdeps on third-party and standard library jars that an application may need, e.g., those in M2_REPO.</description>
        </parameter>
        <parameter>
          <name>groups</name>
          <type>java.lang.String</type>
          <since>2.2</since>
          <required>false</required>
          <editable>true</editable>
          <description>(TestNG/JUnit47 provider with JUnit4.8+ only) Groups for this test. Only classes/methods/etc decorated with one of the groups specified here will be included in test run, if specified.
For JUnit, this parameter forces the use of the 4.7 provider
This parameter is ignored if the suiteXmlFiles parameter is specified.
Since version 2.18.1 and JUnit 4.12, the @Category annotation type is automatically inherited from superclasses, see @java.lang.annotation.Inherited. Make sure that test class inheritance still makes sense together with @Category annotation of the JUnit 4.12 or higher appeared in superclass.</description>
        </parameter>
        <parameter>
          <name>includes</name>
          <type>java.util.List</type>
          <required>false</required>
          <editable>true</editable>
          <description>A list of &lt;include&gt; elements specifying the tests (by pattern) that should be included in testing. When not specified and when the test parameter is not specified, the default includes will be
&lt;includes&gt;
    &lt;include&gt;**/Test*.java&lt;/include&gt;
    &lt;include&gt;**/*Test.java&lt;/include&gt;
    &lt;include&gt;**/*Tests.java&lt;/include&gt;
    &lt;include&gt;**/*TestCase.java&lt;/include&gt;
&lt;/includes&gt;

Each include item may also contain a comma-separated sub-list of items, which will be treated as multiple Â &lt;include&gt; entries.
Since 2.19 a complex syntax is supported in one parameter (JUnit 4, JUnit 4.7+, TestNG):



&lt;include&gt;%regex[.*[Cat|Dog].*], Basic????, !Unstable*&lt;/include&gt; &lt;include&gt;%regex[.*[Cat|Dog].*], !%regex[pkg.*Slow.*.class], pkg/**/*Fast*.java&lt;/include&gt;
This parameter is ignored if the TestNG suiteXmlFiles parameter is specified.

Notice that these values are relative to the directory containing generated test classes of the project being tested. This directory is declared by the parameter testClassesDirectory which defaults to the POM property ${project.build.testOutputDirectory}, typically src/test/java unless overridden.</description>
        </parameter>
        <parameter>
          <name>includesFile</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>A file containing include patterns. Blank lines, or lines starting with # are ignored. If includes are also specified, these patterns are appended. Example with path, simple and regex includes:
*/test/*
**/NotIncludedByDefault.java
%regex[.*Test.*|.*Not.*]

</description>
        </parameter>
        <parameter>
          <name>junitArtifactName</name>
          <type>java.lang.String</type>
          <since>2.3.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>Allows you to specify the name of the JUnit artifact. If not set, junit:junit will be used.</description>
        </parameter>
        <parameter>
          <name>jvm</name>
          <type>java.lang.String</type>
          <since>2.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>Option to specify the jvm (or path to the java executable) to use with the forking options. For the default, the jvm will be a new instance of the same VM as the one used to run Maven. JVM settings are not inherited from MAVEN_OPTS.</description>
        </parameter>
        <parameter>
          <name>loggingLevel</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Log levels as defined in java.util.logging.Level.</description>
        </parameter>
        <parameter>
          <name>objectFactory</name>
          <type>java.lang.String</type>
          <since>2.5</since>
          <required>false</required>
          <editable>true</editable>
          <description>(TestNG only) Define the factory class used to create all test instances.</description>
        </parameter>
        <parameter>
          <name>parallel</name>
          <type>java.lang.String</type>
          <since>2.2</since>
          <required>false</required>
          <editable>true</editable>
          <description>(TestNG provider) When you use the parameter parallel, TestNG will try to run all your test methods in separate threads, except for methods that depend on each other, which will be run in the same thread in order to respect their order of execution.
(JUnit 4.7 provider) Supports values classes, methods, both to run in separate threads been controlled by threadCount.

Since version 2.16 (JUnit 4.7 provider), the value both is DEPRECATED. Use classesAndMethods instead.

Since version 2.16 (JUnit 4.7 provider), additional vales are available:
suites, suitesAndClasses, suitesAndMethods, classesAndMethods, all.</description>
        </parameter>
        <parameter>
          <name>parallelOptimized</name>
          <type>boolean</type>
          <since>2.17</since>
          <required>false</required>
          <editable>true</editable>
          <description>(JUnit 4.7 / provider only) The thread counts do not exceed the number of parallel suite, class runners and average number of methods per class if set to true.
True by default.</description>
        </parameter>
        <parameter>
          <name>parallelTestsTimeoutForcedInSeconds</name>
          <type>double</type>
          <since>2.16</since>
          <required>false</required>
          <editable>true</editable>
          <description>Stop executing queued parallel JUnit tests and interrupt currently running tests after a certain number of seconds.
Example values: &apos;3.5&apos;, &apos;4&apos;

If set to 0, wait forever, never timing out. Makes sense with specified parallel different from &apos;none&apos;.</description>
        </parameter>
        <parameter>
          <name>parallelTestsTimeoutInSeconds</name>
          <type>double</type>
          <since>2.16</since>
          <required>false</required>
          <editable>true</editable>
          <description>Stop executing queued parallel JUnit tests after a certain number of seconds.
Example values: &apos;3.5&apos;, &apos;4&apos;

If set to 0, wait forever, never timing out. Makes sense with specified parallel different from &apos;none&apos;.</description>
        </parameter>
        <parameter>
          <name>perCoreThreadCount</name>
          <type>boolean</type>
          <since>2.5</since>
          <required>false</required>
          <editable>true</editable>
          <description>(JUnit 4.7 provider) Indicates that threadCount, threadCountSuites, threadCountClasses, threadCountMethods are per cpu core.</description>
        </parameter>
        <parameter>
          <name>printGraph</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Set this to &apos;false&apos; to not print the graph obtained from jdeps parsing. When &apos;true&apos; the graph is written to file after the run.</description>
        </parameter>
        <parameter>
          <name>printSummary</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Option to print summary of test suites or just print the test cases that have errors.</description>
        </parameter>
        <parameter>
          <name>properties</name>
          <type>java.util.Properties</type>
          <since>2.4</since>
          <required>false</required>
          <editable>true</editable>
          <description>List of properties for configuring all TestNG related configurations. This is the new preferred method of configuring TestNG.</description>
        </parameter>
        <parameter>
          <name>redirectTestOutputToFile</name>
          <type>boolean</type>
          <since>2.3</since>
          <required>false</required>
          <editable>true</editable>
          <description>Set this to &apos;true&apos; to redirect the unit test standard output to a file (found in reportsDirectory/testName-output.txt).</description>
        </parameter>
        <parameter>
          <name>remoteRepositories</name>
          <type>java.util.List</type>
          <since>2.2</since>
          <required>false</required>
          <editable>true</editable>
          <description>The remote plugin repositories declared in the POM.</description>
        </parameter>
        <parameter>
          <name>reportFormat</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Selects the formatting for the test report to be generated. Can be set as &apos;brief&apos; or &apos;plain&apos;. Only applies to the output format of the output files (target/surefire-reports/testName.txt)</description>
        </parameter>
        <parameter>
          <name>reportNameSuffix</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Add custom text into report filename: TEST-testClassName-reportNameSuffix.xml, testClassName-reportNameSuffix.txt and testClassName-reportNameSuffix-output.txt. File TEST-testClassName-reportNameSuffix.xml has changed attributes &apos;testsuite&apos;--&apos;name&apos; and &apos;testcase&apos;--&apos;classname&apos; - reportNameSuffix is added to the attribute value.</description>
        </parameter>
        <parameter>
          <name>reportsDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>Base directory where all reports are written to.</description>
        </parameter>
        <parameter>
          <name>rerunFailingTestsCount</name>
          <type>int</type>
          <required>false</required>
          <editable>true</editable>
          <description>(JUnit 4+ providers) The number of times each failing test will be rerun. If set larger than 0, rerun failing tests immediately after they fail. If a failing test passes in any of those reruns, it will be marked as pass and reported as a &apos;flake&apos;. However, all the failing attempts will be recorded.</description>
        </parameter>
        <parameter>
          <name>reuseForks</name>
          <type>boolean</type>
          <since>2.13</since>
          <required>false</required>
          <editable>true</editable>
          <description>Indicates if forked VMs can be reused. If set to &apos;false&apos;, a new VM is forked for each test class to be executed. If set to &apos;true&apos;, up to forkCount VMs will be forked and then reused to execute all tests.</description>
        </parameter>
        <parameter>
          <name>runOrder</name>
          <type>java.lang.String</type>
          <since>2.7</since>
          <required>false</required>
          <editable>true</editable>
          <description>Defines the order the tests will be run in. Supported values are alphabetical, reversealphabetical, random, hourly (alphabetical on even hours, reverse alphabetical on odd hours), failedfirst, balanced and filesystem.

Odd/Even for hourly is determined at the time the of scanning the classpath, meaning it could change during a multi-module build.

Failed first will run tests that failed on previous run first, as well as new tests for this run.

Balanced is only relevant with parallel=classes, and will try to optimize the run-order of the tests reducing the overall execution time. Initially a statistics file is created and every next test run will reorder classes.

Note that the statistics are stored in a file named .surefire-XXXXXXXXX beside pom.xml and should not be checked into version control. The &apos;XXXXX&apos; is the SHA1 checksum of the entire surefire configuration, so different configurations will have different statistics files, meaning if you change any configuration settings you will re-run once before new statistics data can be established.</description>
        </parameter>
        <parameter>
          <name>shutdown</name>
          <type>java.lang.String</type>
          <since>2.19</since>
          <required>false</required>
          <editable>true</editable>
          <description>After the plugin process is shutdown by sending SIGTERM signal (CTRL+C), SHUTDOWN command is received by every forked JVM.
By default (shutdown=testset) forked JVM would not continue with new test which means that the current test may still continue to run.
The parameter can be configured with other two values exit and kill.
Using exit forked JVM executes System.exit(1) after the plugin process has received SIGTERM signal.
Using kill the JVM executes Runtime.halt(1) and kills itself.</description>
        </parameter>
        <parameter>
          <name>skip</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Set this to &apos;true&apos; to bypass unit tests entirely. Its use is NOT RECOMMENDED, especially if you enable it using the &apos;maven.test.skip&apos; property, because maven.test.skip disables both running the tests and compiling the tests. Consider using the skipTests parameter instead.</description>
        </parameter>
        <parameter>
          <name>skipAfterFailureCount</name>
          <type>int</type>
          <since>2.19</since>
          <required>false</required>
          <editable>true</editable>
          <description>Set to error/failure count in order to skip remaining tests. Due to race conditions in parallel/forked execution this may not be fully guaranteed.
Enable with system property -Dsurefire.skipAfterFailureCount=1 or any number greater than zero. Defaults to &apos;0&apos;.
See the prerequisites and limitations in documentation:
http://maven.apache.org/plugins/maven-surefire-plugin/examples/skip-after-failure.html</description>
        </parameter>
        <parameter>
          <name>skipExec</name>
          <type>boolean</type>
          <since>2.3</since>
          <deprecated>Use skipTests instead.</deprecated>
          <required>false</required>
          <editable>true</editable>
          <description>This old parameter is just like skipTests, but bound to the old property &apos;maven.test.skip.exec&apos;.</description>
        </parameter>
        <parameter>
          <name>skipTests</name>
          <type>boolean</type>
          <since>2.4</since>
          <required>false</required>
          <editable>true</editable>
          <description>Set this to &apos;true&apos; to skip running tests, but still compile them. Its use is NOT RECOMMENDED, but quite convenient on occasion.</description>
        </parameter>
        <parameter>
          <name>suiteXmlFiles</name>
          <type>java.io.File[]</type>
          <since>2.2</since>
          <required>false</required>
          <editable>true</editable>
          <description>(TestNG) List of &lt;suiteXmlFile&gt; elements specifying TestNG suite xml file locations. Note that suiteXmlFiles is incompatible with several other parameters of this plugin, like includes and excludes.
This parameter is ignored if the test parameter is specified (allowing you to run a single test instead of an entire suite).</description>
        </parameter>
        <parameter>
          <name>systemProperties</name>
          <type>java.util.Properties</type>
          <deprecated>Use systemPropertyVariables instead.</deprecated>
          <required>false</required>
          <editable>true</editable>
          <description>List of System properties to pass to the JUnit tests.</description>
        </parameter>
        <parameter>
          <name>systemPropertiesFile</name>
          <type>java.io.File</type>
          <since>2.8.2</since>
          <required>false</required>
          <editable>true</editable>
          <description>List of System properties, loaded from a file, to pass to the JUnit tests.</description>
        </parameter>
        <parameter>
          <name>systemPropertyVariables</name>
          <type>java.util.Map</type>
          <since>2.5</since>
          <required>false</required>
          <editable>true</editable>
          <description>List of System properties to pass to the JUnit tests.</description>
        </parameter>
        <parameter>
          <name>tempDir</name>
          <type>java.lang.String</type>
          <since>2.20</since>
          <required>false</required>
          <editable>true</editable>
          <description>Relative path to temporary-surefire-boot directory containing internal Surefire temporary files.
The temporary-surefire-boot directory is project.build.directory on most platforms or system default temporary-directory specified by the system property java.io.tmpdir on Windows (see SUREFIRE-1400).
It is deleted after the test set has completed.</description>
        </parameter>
        <parameter>
          <name>test</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specify this parameter to run individual tests by file name, overriding the parameter includes and excludes. Each pattern you specify here will be used to create an include pattern formatted like **/${test}.java, so you can just type -Dtest=MyTest to run a single test called &apos;foo/MyTest.java&apos;. The test patterns prefixed with a ! will be excluded.
This parameter overrides the parameter includes, excludes, and the TestNG parameter suiteXmlFiles.
Since 2.7.3, you can execute a limited number of methods in the test by adding #myMethod or #my*ethod. For example, -Dtest=MyTest#myMethod. This is supported for junit 4.x and TestNg.

Since 2.19 a complex syntax is supported in one parameter (JUnit 4, JUnit 4.7+, TestNG):
&apos;-Dtest=???Test, !Unstable*, pkg/**/Ci*leTest.java, *Test#test*One+testTwo?????, #fast*+slowTest&apos;

or e.g.
&apos;-Dtest=Basic*, !%regex[.*.Unstable.*], !%regex[.*.MyTest.class#one.*|two.*], %regex[#fast.*|slow.*]&apos;


The Parameterized JUnit runner describes test methods using an index in brackets, so the non-regex method pattern would become: #testMethod[*]. If using @Parameters(name=&apos;{index}: fib({0})={1}&apos;) and selecting the index e.g. 5 in pattern, the non-regex method pattern would become #testMethod[5:*].</description>
        </parameter>
        <parameter>
          <name>testClassesDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>The directory containing generated test classes of the project being tested. This will be included at the beginning of the test classpath. *</description>
        </parameter>
        <parameter>
          <name>testFailureIgnore</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Set this to &apos;true&apos; to ignore a failure during testing. Its use is NOT RECOMMENDED, but quite convenient on occasion.</description>
        </parameter>
        <parameter>
          <name>testNGArtifactName</name>
          <type>java.lang.String</type>
          <since>2.3.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>Allows you to specify the name of the TestNG artifact. If not set, org.testng:testng will be used.</description>
        </parameter>
        <parameter>
          <name>testSourceDirectory</name>
          <type>java.io.File</type>
          <since>2.2</since>
          <required>true</required>
          <editable>true</editable>
          <description>The test source directory containing test class sources.</description>
        </parameter>
        <parameter>
          <name>threadCount</name>
          <type>int</type>
          <since>2.2</since>
          <required>false</required>
          <editable>true</editable>
          <description>(TestNG/JUnit 4.7 provider) The attribute thread-count allows you to specify how many threads should be allocated for this execution. Only makes sense to use in conjunction with the parallel parameter.</description>
        </parameter>
        <parameter>
          <name>threadCountClasses</name>
          <type>int</type>
          <since>2.16</since>
          <required>false</required>
          <editable>true</editable>
          <description>(JUnit 4.7 provider) This attribute allows you to specify the concurrency in test classes, i.e.:
-	number of concurrent classes if threadCount is 0 or unspecified
-	limited classes concurrency if useUnlimitedThreads is set to true
-	if threadCount and certain thread-count parameters are &gt; 0 for parallel, the concurrency is computed from ratio. For instance parallel=all and the ratio between threadCountSuites:threadCountClasses:threadCountMethods is 2:3:5, there is 30% of threadCount in concurrent classes.
-	as in the previous case but without this leaf thread-count. Example: parallel=suitesAndClasses, threadCount=16, threadCountSuites=5, threadCountClasses is unspecified leaf, the number of concurrent classes is varying from &gt;= 11 to 14 or 15. The threadCountSuites become given number of threads.
Only makes sense to use in conjunction with the parallel parameter. The default value 0 behaves same as unspecified one.</description>
        </parameter>
        <parameter>
          <name>threadCountMethods</name>
          <type>int</type>
          <since>2.16</since>
          <required>false</required>
          <editable>true</editable>
          <description>(JUnit 4.7 provider) This attribute allows you to specify the concurrency in test methods, i.e.:
-	number of concurrent methods if threadCount is 0 or unspecified
-	limited concurrency of methods if useUnlimitedThreads is set to true
-	if threadCount and certain thread-count parameters are &gt; 0 for parallel, the concurrency is computed from ratio. For instance parallel=all and the ratio between threadCountSuites:threadCountClasses:threadCountMethods is 2:3:5, there is 50% of threadCount which appears in concurrent methods.
-	as in the previous case but without this leaf thread-count. Example: parallel=all, threadCount=16, threadCountSuites=2, threadCountClasses=3, but threadCountMethods is unspecified leaf, the number of concurrent methods is varying from &gt;= 11 to 14 or 15. The threadCountSuites and threadCountClasses become given number of threads.
Only makes sense to use in conjunction with the parallel parameter. The default value 0 behaves same as unspecified one.</description>
        </parameter>
        <parameter>
          <name>threadCountSuites</name>
          <type>int</type>
          <since>2.16</since>
          <required>false</required>
          <editable>true</editable>
          <description>(JUnit 4.7 provider) This attribute allows you to specify the concurrency in test suites, i.e.:
-	number of concurrent suites if threadCount is 0 or unspecified
-	limited suites concurrency if useUnlimitedThreads is set to true
-	if threadCount and certain thread-count parameters are &gt; 0 for parallel, the concurrency is computed from ratio. For instance parallel=all and the ratio between threadCountSuites:threadCountClasses:threadCountMethods is 2:3:5, there is 20% of threadCount which appeared in concurrent suites.
Only makes sense to use in conjunction with the parallel parameter. The default value 0 behaves same as unspecified one.</description>
        </parameter>
        <parameter>
          <name>trackNewClasses</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Set to &apos;true&apos; to print newly-added classes: classes in the program that were not in the previous version.</description>
        </parameter>
        <parameter>
          <name>trimStackTrace</name>
          <type>boolean</type>
          <since>2.2</since>
          <required>false</required>
          <editable>true</editable>
          <description>Whether to trim the stack trace in the reports to just the lines within the test, or show the full trace.</description>
        </parameter>
        <parameter>
          <name>updateDiffChecksums</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Set this to &apos;true&apos; to update test dependencies on disk. The default value of &apos;false&apos; is useful for &apos;dry runs&apos; where one may want to see the diff without updating the test dependencies.</description>
        </parameter>
        <parameter>
          <name>updateImpactedChecksums</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Set this to &apos;true&apos; to update test dependencies on disk. The default value of &apos;false&apos; is useful for &apos;dry runs&apos; where one may want to see the diff without updating the test dependencies.</description>
        </parameter>
        <parameter>
          <name>useFile</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Option to generate a file test report or just output the test report to the console.</description>
        </parameter>
        <parameter>
          <name>useManifestOnlyJar</name>
          <type>boolean</type>
          <since>2.4.3</since>
          <required>false</required>
          <editable>true</editable>
          <description>By default, Surefire forks your tests using a manifest-only JAR; set this parameter to &apos;false&apos; to force it to launch your tests with a plain old Java classpath. (See the http://maven.apache.org/plugins/maven-surefire-plugin/examples/class-loading.html for a more detailed explanation of manifest-only JARs and their benefits.)
Beware, setting this to &apos;false&apos; may cause your tests to fail on Windows if your classpath is too long.</description>
        </parameter>
        <parameter>
          <name>useSystemClassLoader</name>
          <type>boolean</type>
          <since>2.3</since>
          <required>false</required>
          <editable>true</editable>
          <description>Option to pass dependencies to the system&apos;s classloader instead of using an isolated class loader when forking. Prevents problems with JDKs which implement the service provider lookup mechanism by using the system&apos;s ClassLoader.</description>
        </parameter>
        <parameter>
          <name>useUnlimitedThreads</name>
          <type>boolean</type>
          <since>2.5</since>
          <required>false</required>
          <editable>true</editable>
          <description>(JUnit 4.7 provider) Indicates that the thread pool will be unlimited. The parallel parameter and the actual number of classes/methods will decide. Setting this to &apos;true&apos; effectively disables perCoreThreadCount and threadCount. Defaults to &apos;false&apos;.</description>
        </parameter>
        <parameter>
          <name>workingDirectory</name>
          <type>java.io.File</type>
          <since>2.1.3</since>
          <required>false</required>
          <editable>true</editable>
          <description>Command line working directory.</description>
        </parameter>
        <parameter>
          <name>writePath</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Set this to &apos;true&apos; to write the surefire classpath to disk. Note that the surefire classpath will also be written to disk at or below log Level.FINER</description>
        </parameter>
      </parameters>
      <configuration>
        <additionalClasspathElements implementation="java.lang.String[]">${maven.test.additionalClasspath}</additionalClasspathElements>
        <argLine implementation="java.lang.String">${argLine}</argLine>
        <basedir implementation="java.io.File" default-value="${basedir}"/>
        <childDelegation implementation="boolean" default-value="false">${childDelegation}</childDelegation>
        <classesDirectory implementation="java.io.File" default-value="${project.build.outputDirectory}"/>
        <classpathDependencyExcludes implementation="java.lang.String[]">${maven.test.dependency.excludes}</classpathDependencyExcludes>
        <cleanBytes implementation="boolean" default-value="true">${cleanBytes}</cleanBytes>
        <debugForkedProcess implementation="java.lang.String">${maven.surefire.debug}</debugForkedProcess>
        <dependenciesToScan implementation="java.lang.String[]">${dependenciesToScan}</dependenciesToScan>
        <depFormat implementation="edu.illinois.starts.enums.DependencyFormat" default-value="ZLC">${depFormat}</depFormat>
        <disableXmlReport implementation="boolean" default-value="false">${disableXmlReport}</disableXmlReport>
        <enableAssertions implementation="boolean" default-value="true">${enableAssertions}</enableAssertions>
        <excludedGroups implementation="java.lang.String">${excludedGroups}</excludedGroups>
        <excludesFile implementation="java.io.File">${surefire.excludesFile}</excludesFile>
        <failIfNoSpecifiedTests implementation="java.lang.Boolean">${surefire.failIfNoSpecifiedTests}</failIfNoSpecifiedTests>
        <failIfNoTests implementation="java.lang.Boolean">${failIfNoTests}</failIfNoTests>
        <filterLib implementation="boolean" default-value="false">${filterLib}</filterLib>
        <forkCount implementation="java.lang.String" default-value="1">${forkCount}</forkCount>
        <forkedProcessExitTimeoutInSeconds implementation="int" default-value="30">${surefire.exitTimeout}</forkedProcessExitTimeoutInSeconds>
        <forkedProcessTimeoutInSeconds implementation="int">${surefire.timeout}</forkedProcessTimeoutInSeconds>
        <forkMode implementation="java.lang.String" default-value="once">${forkMode}</forkMode>
        <graphCache implementation="java.lang.String" default-value="${basedir}${file.separator}jdeps-cache">${gCache}</graphCache>
        <groups implementation="java.lang.String">${groups}</groups>
        <includesFile implementation="java.io.File">${surefire.includesFile}</includesFile>
        <junitArtifactName implementation="java.lang.String" default-value="junit:junit">${junitArtifactName}</junitArtifactName>
        <jvm implementation="java.lang.String">${jvm}</jvm>
        <loggingLevel implementation="java.lang.String" default-value="CONFIG">${startsLogging}</loggingLevel>
        <objectFactory implementation="java.lang.String">${objectFactory}</objectFactory>
        <parallel implementation="java.lang.String">${parallel}</parallel>
        <parallelOptimized implementation="boolean" default-value="true">${parallelOptimized}</parallelOptimized>
        <parallelTestsTimeoutForcedInSeconds implementation="double">${surefire.parallel.forcedTimeout}</parallelTestsTimeoutForcedInSeconds>
        <parallelTestsTimeoutInSeconds implementation="double">${surefire.parallel.timeout}</parallelTestsTimeoutInSeconds>
        <perCoreThreadCount implementation="boolean" default-value="true">${perCoreThreadCount}</perCoreThreadCount>
        <printGraph implementation="boolean" default-value="true">${printGraph}</printGraph>
        <printSummary implementation="boolean" default-value="true">${surefire.printSummary}</printSummary>
        <redirectTestOutputToFile implementation="boolean" default-value="false">${maven.test.redirectTestOutputToFile}</redirectTestOutputToFile>
        <remoteRepositories implementation="java.util.List" default-value="${project.pluginArtifactRepositories}"/>
        <reportFormat implementation="java.lang.String" default-value="brief">${surefire.reportFormat}</reportFormat>
        <reportNameSuffix implementation="java.lang.String" default-value="">${surefire.reportNameSuffix}</reportNameSuffix>
        <reportsDirectory implementation="java.io.File" default-value="${project.build.directory}/surefire-reports"/>
        <rerunFailingTestsCount implementation="int" default-value="0">${surefire.rerunFailingTestsCount}</rerunFailingTestsCount>
        <reuseForks implementation="boolean" default-value="true">${reuseForks}</reuseForks>
        <runOrder implementation="java.lang.String" default-value="filesystem">${surefire.runOrder}</runOrder>
        <shutdown implementation="java.lang.String" default-value="testset">${surefire.shutdown}</shutdown>
        <skip implementation="boolean" default-value="false">${maven.test.skip}</skip>
        <skipAfterFailureCount implementation="int" default-value="0">${surefire.skipAfterFailureCount}</skipAfterFailureCount>
        <skipExec implementation="boolean">${maven.test.skip.exec}</skipExec>
        <skipTests implementation="boolean" default-value="false">${skipTests}</skipTests>
        <suiteXmlFiles implementation="java.io.File[]">${surefire.suiteXmlFiles}</suiteXmlFiles>
        <tempDir implementation="java.lang.String" default-value="surefire">${tempDir}</tempDir>
        <test implementation="java.lang.String">${test}</test>
        <testClassesDirectory implementation="java.io.File" default-value="${project.build.testOutputDirectory}"/>
        <testFailureIgnore implementation="boolean" default-value="false">${maven.test.failure.ignore}</testFailureIgnore>
        <testNGArtifactName implementation="java.lang.String" default-value="org.testng:testng">${testNGArtifactName}</testNGArtifactName>
        <testSourceDirectory implementation="java.io.File" default-value="${project.build.testSourceDirectory}"/>
        <threadCount implementation="int">${threadCount}</threadCount>
        <threadCountClasses implementation="int" default-value="0">${threadCountClasses}</threadCountClasses>
        <threadCountMethods implementation="int" default-value="0">${threadCountMethods}</threadCountMethods>
        <threadCountSuites implementation="int" default-value="0">${threadCountSuites}</threadCountSuites>
        <trackNewClasses implementation="boolean" default-value="false">${trackNewClasses}</trackNewClasses>
        <trimStackTrace implementation="boolean" default-value="true">${trimStackTrace}</trimStackTrace>
        <updateDiffChecksums implementation="boolean" default-value="false">${updateDiffChecksums}</updateDiffChecksums>
        <updateImpactedChecksums implementation="boolean" default-value="false">${updateImpactedChecksums}</updateImpactedChecksums>
        <useFile implementation="boolean" default-value="true">${surefire.useFile}</useFile>
        <useManifestOnlyJar implementation="boolean" default-value="true">${surefire.useManifestOnlyJar}</useManifestOnlyJar>
        <useSystemClassLoader implementation="boolean" default-value="true">${surefire.useSystemClassLoader}</useSystemClassLoader>
        <useUnlimitedThreads implementation="boolean" default-value="false">${useUnlimitedThreads}</useUnlimitedThreads>
        <workingDirectory implementation="java.io.File">${basedir}</workingDirectory>
        <writePath implementation="boolean" default-value="false">${writePath}</writePath>
      </configuration>
    </mojo>
    <mojo>
      <goal>run</goal>
      <description>Prepares for test runs by writing non-affected tests in the excludesFile.</description>
      <requiresDependencyResolution>test</requiresDependencyResolution>
      <requiresDirectInvocation>false</requiresDirectInvocation>
      <requiresProject>true</requiresProject>
      <requiresReports>false</requiresReports>
      <aggregator>false</aggregator>
      <requiresOnline>false</requiresOnline>
      <inheritedByDefault>true</inheritedByDefault>
      <executePhase>test-compile</executePhase>
      <implementation>edu.illinois.starts.jdeps.RunMojo</implementation>
      <language>java</language>
      <instantiationStrategy>per-lookup</instantiationStrategy>
      <executionStrategy>once-per-session</executionStrategy>
      <threadSafe>false</threadSafe>
      <parameters>
        <parameter>
          <name>additionalClasspathElements</name>
          <type>java.lang.String[]</type>
          <since>2.4</since>
          <required>false</required>
          <editable>true</editable>
          <description>Additional elements to be appended to the classpath.</description>
        </parameter>
        <parameter>
          <name>argLine</name>
          <type>java.lang.String</type>
          <since>2.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>Arbitrary JVM options to set on the command line.

Since the Version 2.17 using an alternate syntax for argLine, @{...} allows late replacement of properties when the plugin is executed, so properties that have been modified by other plugins will be picked up correctly. See the Frequently Asked Questions page with more details:
http://maven.apache.org/surefire/maven-surefire-plugin/faq.html
http://maven.apache.org/surefire/maven-failsafe-plugin/faq.html</description>
        </parameter>
        <parameter>
          <name>basedir</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>The base directory of the project being tested. This can be obtained in your integration test via System.getProperty(&apos;basedir&apos;).</description>
        </parameter>
        <parameter>
          <name>childDelegation</name>
          <type>boolean</type>
          <since>2.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>When false it makes tests run using the standard classloader delegation instead of the default Maven isolated classloader. Only used when forking (forkMode is not none).
Setting it to false helps with some problems caused by conflicts between xml parsers in the classpath and the Java 5 provider parser.</description>
        </parameter>
        <parameter>
          <name>classesDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>The directory containing generated classes of the project being tested. This will be included after the test classes in the test classpath.</description>
        </parameter>
        <parameter>
          <name>classpathDependencyExcludes</name>
          <type>java.lang.String[]</type>
          <since>2.6</since>
          <required>false</required>
          <editable>true</editable>
          <description>List of dependencies to exclude from the test classpath. Each dependency string must follow the format groupId:artifactId. For example: org.acme:project-a</description>
        </parameter>
        <parameter>
          <name>classpathDependencyScopeExclude</name>
          <type>java.lang.String</type>
          <since>2.6</since>
          <required>false</required>
          <editable>true</editable>
          <description>A dependency scope to exclude from the test classpath. The scope should be one of the scopes defined by org.apache.maven.artifact.Artifact. This includes the following:

-	compile - system, provided, compile
-	runtime - compile, runtime
-	compile+runtime - system, provided, compile, runtime
-	runtime+system - system, compile, runtime
-	test - system, provided, compile, runtime, test
</description>
        </parameter>
        <parameter>
          <name>cleanBytes</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Set this to &apos;false&apos; to disable smart hashing, i.e., to *not* strip Bytecode files of debug info prior to computing checksums. See the &apos;Smart Checksums&apos; Sections in the Ekstazi paper: http://dl.acm.org/citation.cfm?id=2771784</description>
        </parameter>
        <parameter>
          <name>debugForkedProcess</name>
          <type>java.lang.String</type>
          <since>2.4</since>
          <required>false</required>
          <editable>true</editable>
          <description>Attach a debugger to the forked JVM. If set to &apos;true&apos;, the process will suspend and wait for a debugger to attach on port 5005. If set to some other string, that string will be appended to the argLine, allowing you to configure arbitrary debuggability options (without overwriting the other options specified through the argLine parameter).</description>
        </parameter>
        <parameter>
          <name>dependenciesToScan</name>
          <type>java.lang.String[]</type>
          <since>2.15</since>
          <required>false</required>
          <editable>true</editable>
          <description>List of dependencies to scan for test classes to include in the test run. The child elements of this element must be &lt;dependency&gt; elements, and the contents of each of these elements must be a string which follows the format: groupId:artifactId. For example: org.acme:project-a.</description>
        </parameter>
        <parameter>
          <name>depFormat</name>
          <type>edu.illinois.starts.enums.DependencyFormat</type>
          <required>false</required>
          <editable>true</editable>
          <description>Allows to switch the format in which we want to store the test dependencies. A full list of what we currently support can be found in</description>
        </parameter>
        <parameter>
          <name>disableXmlReport</name>
          <type>boolean</type>
          <since>2.2</since>
          <required>false</required>
          <editable>true</editable>
          <description>Flag to disable the generation of report files in xml format.</description>
        </parameter>
        <parameter>
          <name>enableAssertions</name>
          <type>boolean</type>
          <since>2.3.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>By default, Surefire enables JVM assertions for the execution of your test cases. To disable the assertions, set this flag to &apos;false&apos;.</description>
        </parameter>
        <parameter>
          <name>environmentVariables</name>
          <type>java.util.Map</type>
          <since>2.1.3</since>
          <required>false</required>
          <editable>true</editable>
          <description>Additional environment variables to set on the command line.</description>
        </parameter>
        <parameter>
          <name>excludedGroups</name>
          <type>java.lang.String</type>
          <since>2.2</since>
          <required>false</required>
          <editable>true</editable>
          <description>(TestNG/JUnit47 provider with JUnit4.8+ only) Excluded groups. Any methods/classes/etc with one of the groups specified in this list will specifically not be run.
For JUnit, this parameter forces the use of the 4.7 provider.
This parameter is ignored if the suiteXmlFiles parameter is specified.
Since version 2.18.1 and JUnit 4.12, the @Category annotation type is automatically inherited from superclasses, see @java.lang.annotation.Inherited. Make sure that test class inheritance still makes sense together with @Category annotation of the JUnit 4.12 or higher appeared in superclass.</description>
        </parameter>
        <parameter>
          <name>excludes</name>
          <type>java.util.List</type>
          <required>false</required>
          <editable>true</editable>
          <description>A list of &lt;exclude&gt; elements specifying the tests (by pattern) that should be excluded in testing. When not specified and when the test parameter is not specified, the default excludes will be

&lt;excludes&gt;
    &lt;exclude&gt;**/*$*&lt;/exclude&gt;
&lt;/excludes&gt;

(which excludes all inner classes).
This parameter is ignored if the TestNG suiteXmlFiles parameter is specified.
Each exclude item may also contain a comma-separated sub-list of items, which will be treated as multiple Â &lt;exclude&gt; entries.
Since 2.19 a complex syntax is supported in one parameter (JUnit 4, JUnit 4.7+, TestNG):
&lt;exclude&gt;%regex[pkg.*Slow.*.class], Unstable*&lt;/exclude&gt;


Notice that these values are relative to the directory containing generated test classes of the project being tested. This directory is declared by the parameter testClassesDirectory which defaults to the POM property ${project.build.testOutputDirectory}, typically src/test/java unless overridden.</description>
        </parameter>
        <parameter>
          <name>excludesFile</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>A file containing exclude patterns. Blank lines, or lines starting with # are ignored. If excludes are also specified, these patterns are appended. Example with path, simple and regex excludes:

*/test/*
**/DontRunTest.*
%regex[.*Test.*|.*Not.*]

</description>
        </parameter>
        <parameter>
          <name>failIfNoSpecifiedTests</name>
          <type>java.lang.Boolean</type>
          <since>2.12</since>
          <required>false</required>
          <editable>true</editable>
          <description>Set this to &apos;true&apos; to cause a failure if none of the tests specified in -Dtest=... are run. Defaults to &apos;true&apos;.</description>
        </parameter>
        <parameter>
          <name>failIfNoTests</name>
          <type>java.lang.Boolean</type>
          <since>2.4</since>
          <required>false</required>
          <editable>true</editable>
          <description>Set this to &apos;true&apos; to cause a failure if there are no tests to run. Defaults to &apos;false&apos;.</description>
        </parameter>
        <parameter>
          <name>filterLib</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Set this to &apos;false&apos; to not filter out &apos;sun.*&apos; and &apos;java.*&apos; classes from jdeps parsing.</description>
        </parameter>
        <parameter>
          <name>forkCount</name>
          <type>java.lang.String</type>
          <since>2.14</since>
          <required>false</required>
          <editable>true</editable>
          <description>Option to specify the number of VMs to fork in parallel in order to execute the tests. When terminated with &apos;C&apos;, the number part is multiplied with the number of CPU cores. Floating point value are only accepted together with &apos;C&apos;. If set to &apos;0&apos;, no VM is forked and all tests are executed within the main process.

Example values: &apos;1.5C&apos;, &apos;4&apos;

The system properties and the argLine of the forked processes may contain the place holder string ${surefire.forkNumber}, which is replaced with a fixed number for each of the parallel forks, ranging from 1 to the effective value of forkCount times the maximum number of parallel Surefire executions in maven parallel builds, i.e. the effective value of the -T command line argument of maven core.</description>
        </parameter>
        <parameter>
          <name>forkedProcessExitTimeoutInSeconds</name>
          <type>int</type>
          <since>2.20</since>
          <required>false</required>
          <editable>true</editable>
          <description>Forked process is normally terminated without any significant delay after given tests have completed. If the particular tests started non-daemon Thread(s), the process hangs instead of been properly terminated by System.exit(). Use this parameter in order to determine the timeout of terminating the process. see the documentation: http://maven.apache.org/surefire/maven-surefire-plugin/examples/shutdown.html Turns to default fallback value of 30 seconds if negative integer.</description>
        </parameter>
        <parameter>
          <name>forkedProcessTimeoutInSeconds</name>
          <type>int</type>
          <since>2.4</since>
          <required>false</required>
          <editable>true</editable>
          <description>Kill the forked test process after a certain number of seconds. If set to 0, wait forever for the process, never timing out.</description>
        </parameter>
        <parameter>
          <name>forkMode</name>
          <type>java.lang.String</type>
          <since>2.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>DEPRECATED since version 2.14. Use forkCount and reuseForks instead.

Option to specify the forking mode. Can be never, once, always, perthread.
The none and pertest are also accepted for backwards compatibility.
The always forks for each test-class.
The perthread creates the number of parallel forks specified by threadCount, where each forked JVM is executing one test-class. See also the parameter reuseForks for the lifetime of JVM.</description>
        </parameter>
        <parameter>
          <name>graphCache</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Path to directory that contains the result of running jdeps on third-party and standard library jars that an application may need, e.g., those in M2_REPO.</description>
        </parameter>
        <parameter>
          <name>groups</name>
          <type>java.lang.String</type>
          <since>2.2</since>
          <required>false</required>
          <editable>true</editable>
          <description>(TestNG/JUnit47 provider with JUnit4.8+ only) Groups for this test. Only classes/methods/etc decorated with one of the groups specified here will be included in test run, if specified.
For JUnit, this parameter forces the use of the 4.7 provider
This parameter is ignored if the suiteXmlFiles parameter is specified.
Since version 2.18.1 and JUnit 4.12, the @Category annotation type is automatically inherited from superclasses, see @java.lang.annotation.Inherited. Make sure that test class inheritance still makes sense together with @Category annotation of the JUnit 4.12 or higher appeared in superclass.</description>
        </parameter>
        <parameter>
          <name>includes</name>
          <type>java.util.List</type>
          <required>false</required>
          <editable>true</editable>
          <description>A list of &lt;include&gt; elements specifying the tests (by pattern) that should be included in testing. When not specified and when the test parameter is not specified, the default includes will be
&lt;includes&gt;
    &lt;include&gt;**/Test*.java&lt;/include&gt;
    &lt;include&gt;**/*Test.java&lt;/include&gt;
    &lt;include&gt;**/*Tests.java&lt;/include&gt;
    &lt;include&gt;**/*TestCase.java&lt;/include&gt;
&lt;/includes&gt;

Each include item may also contain a comma-separated sub-list of items, which will be treated as multiple Â &lt;include&gt; entries.
Since 2.19 a complex syntax is supported in one parameter (JUnit 4, JUnit 4.7+, TestNG):



&lt;include&gt;%regex[.*[Cat|Dog].*], Basic????, !Unstable*&lt;/include&gt; &lt;include&gt;%regex[.*[Cat|Dog].*], !%regex[pkg.*Slow.*.class], pkg/**/*Fast*.java&lt;/include&gt;
This parameter is ignored if the TestNG suiteXmlFiles parameter is specified.

Notice that these values are relative to the directory containing generated test classes of the project being tested. This directory is declared by the parameter testClassesDirectory which defaults to the POM property ${project.build.testOutputDirectory}, typically src/test/java unless overridden.</description>
        </parameter>
        <parameter>
          <name>includesFile</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>A file containing include patterns. Blank lines, or lines starting with # are ignored. If includes are also specified, these patterns are appended. Example with path, simple and regex includes:
*/test/*
**/NotIncludedByDefault.java
%regex[.*Test.*|.*Not.*]

</description>
        </parameter>
        <parameter>
          <name>junitArtifactName</name>
          <type>java.lang.String</type>
          <since>2.3.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>Allows you to specify the name of the JUnit artifact. If not set, junit:junit will be used.</description>
        </parameter>
        <parameter>
          <name>jvm</name>
          <type>java.lang.String</type>
          <since>2.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>Option to specify the jvm (or path to the java executable) to use with the forking options. For the default, the jvm will be a new instance of the same VM as the one used to run Maven. JVM settings are not inherited from MAVEN_OPTS.</description>
        </parameter>
        <parameter>
          <name>loggingLevel</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Log levels as defined in java.util.logging.Level.</description>
        </parameter>
        <parameter>
          <name>objectFactory</name>
          <type>java.lang.String</type>
          <since>2.5</since>
          <required>false</required>
          <editable>true</editable>
          <description>(TestNG only) Define the factory class used to create all test instances.</description>
        </parameter>
        <parameter>
          <name>parallel</name>
          <type>java.lang.String</type>
          <since>2.2</since>
          <required>false</required>
          <editable>true</editable>
          <description>(TestNG provider) When you use the parameter parallel, TestNG will try to run all your test methods in separate threads, except for methods that depend on each other, which will be run in the same thread in order to respect their order of execution.
(JUnit 4.7 provider) Supports values classes, methods, both to run in separate threads been controlled by threadCount.

Since version 2.16 (JUnit 4.7 provider), the value both is DEPRECATED. Use classesAndMethods instead.

Since version 2.16 (JUnit 4.7 provider), additional vales are available:
suites, suitesAndClasses, suitesAndMethods, classesAndMethods, all.</description>
        </parameter>
        <parameter>
          <name>parallelOptimized</name>
          <type>boolean</type>
          <since>2.17</since>
          <required>false</required>
          <editable>true</editable>
          <description>(JUnit 4.7 / provider only) The thread counts do not exceed the number of parallel suite, class runners and average number of methods per class if set to true.
True by default.</description>
        </parameter>
        <parameter>
          <name>parallelTestsTimeoutForcedInSeconds</name>
          <type>double</type>
          <since>2.16</since>
          <required>false</required>
          <editable>true</editable>
          <description>Stop executing queued parallel JUnit tests and interrupt currently running tests after a certain number of seconds.
Example values: &apos;3.5&apos;, &apos;4&apos;

If set to 0, wait forever, never timing out. Makes sense with specified parallel different from &apos;none&apos;.</description>
        </parameter>
        <parameter>
          <name>parallelTestsTimeoutInSeconds</name>
          <type>double</type>
          <since>2.16</since>
          <required>false</required>
          <editable>true</editable>
          <description>Stop executing queued parallel JUnit tests after a certain number of seconds.
Example values: &apos;3.5&apos;, &apos;4&apos;

If set to 0, wait forever, never timing out. Makes sense with specified parallel different from &apos;none&apos;.</description>
        </parameter>
        <parameter>
          <name>perCoreThreadCount</name>
          <type>boolean</type>
          <since>2.5</since>
          <required>false</required>
          <editable>true</editable>
          <description>(JUnit 4.7 provider) Indicates that threadCount, threadCountSuites, threadCountClasses, threadCountMethods are per cpu core.</description>
        </parameter>
        <parameter>
          <name>printGraph</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Set this to &apos;false&apos; to not print the graph obtained from jdeps parsing. When &apos;true&apos; the graph is written to file after the run.</description>
        </parameter>
        <parameter>
          <name>printSummary</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Option to print summary of test suites or just print the test cases that have errors.</description>
        </parameter>
        <parameter>
          <name>properties</name>
          <type>java.util.Properties</type>
          <since>2.4</since>
          <required>false</required>
          <editable>true</editable>
          <description>List of properties for configuring all TestNG related configurations. This is the new preferred method of configuring TestNG.</description>
        </parameter>
        <parameter>
          <name>redirectTestOutputToFile</name>
          <type>boolean</type>
          <since>2.3</since>
          <required>false</required>
          <editable>true</editable>
          <description>Set this to &apos;true&apos; to redirect the unit test standard output to a file (found in reportsDirectory/testName-output.txt).</description>
        </parameter>
        <parameter>
          <name>remoteRepositories</name>
          <type>java.util.List</type>
          <since>2.2</since>
          <required>false</required>
          <editable>true</editable>
          <description>The remote plugin repositories declared in the POM.</description>
        </parameter>
        <parameter>
          <name>reportFormat</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Selects the formatting for the test report to be generated. Can be set as &apos;brief&apos; or &apos;plain&apos;. Only applies to the output format of the output files (target/surefire-reports/testName.txt)</description>
        </parameter>
        <parameter>
          <name>reportNameSuffix</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Add custom text into report filename: TEST-testClassName-reportNameSuffix.xml, testClassName-reportNameSuffix.txt and testClassName-reportNameSuffix-output.txt. File TEST-testClassName-reportNameSuffix.xml has changed attributes &apos;testsuite&apos;--&apos;name&apos; and &apos;testcase&apos;--&apos;classname&apos; - reportNameSuffix is added to the attribute value.</description>
        </parameter>
        <parameter>
          <name>reportsDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>Base directory where all reports are written to.</description>
        </parameter>
        <parameter>
          <name>rerunFailingTestsCount</name>
          <type>int</type>
          <required>false</required>
          <editable>true</editable>
          <description>(JUnit 4+ providers) The number of times each failing test will be rerun. If set larger than 0, rerun failing tests immediately after they fail. If a failing test passes in any of those reruns, it will be marked as pass and reported as a &apos;flake&apos;. However, all the failing attempts will be recorded.</description>
        </parameter>
        <parameter>
          <name>retestAll</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Set this option to &apos;true&apos; to run all tests, not just the affected ones. This option is useful in cases where one is interested to measure the time to run all tests, while at the same time measuring the times for analyzing what tests to select and reporting the number of tests it would select. Note: Run with &apos;-DstartsLogging=FINER&apos; or &apos;-DstartsLogging=FINEST&apos; so that the &apos;selected-tests&apos; file, which contains the list of tests that would be run if this option is set to false, will be written to disk.</description>
        </parameter>
        <parameter>
          <name>reuseForks</name>
          <type>boolean</type>
          <since>2.13</since>
          <required>false</required>
          <editable>true</editable>
          <description>Indicates if forked VMs can be reused. If set to &apos;false&apos;, a new VM is forked for each test class to be executed. If set to &apos;true&apos;, up to forkCount VMs will be forked and then reused to execute all tests.</description>
        </parameter>
        <parameter>
          <name>runOrder</name>
          <type>java.lang.String</type>
          <since>2.7</since>
          <required>false</required>
          <editable>true</editable>
          <description>Defines the order the tests will be run in. Supported values are alphabetical, reversealphabetical, random, hourly (alphabetical on even hours, reverse alphabetical on odd hours), failedfirst, balanced and filesystem.

Odd/Even for hourly is determined at the time the of scanning the classpath, meaning it could change during a multi-module build.

Failed first will run tests that failed on previous run first, as well as new tests for this run.

Balanced is only relevant with parallel=classes, and will try to optimize the run-order of the tests reducing the overall execution time. Initially a statistics file is created and every next test run will reorder classes.

Note that the statistics are stored in a file named .surefire-XXXXXXXXX beside pom.xml and should not be checked into version control. The &apos;XXXXX&apos; is the SHA1 checksum of the entire surefire configuration, so different configurations will have different statistics files, meaning if you change any configuration settings you will re-run once before new statistics data can be established.</description>
        </parameter>
        <parameter>
          <name>shutdown</name>
          <type>java.lang.String</type>
          <since>2.19</since>
          <required>false</required>
          <editable>true</editable>
          <description>After the plugin process is shutdown by sending SIGTERM signal (CTRL+C), SHUTDOWN command is received by every forked JVM.
By default (shutdown=testset) forked JVM would not continue with new test which means that the current test may still continue to run.
The parameter can be configured with other two values exit and kill.
Using exit forked JVM executes System.exit(1) after the plugin process has received SIGTERM signal.
Using kill the JVM executes Runtime.halt(1) and kills itself.</description>
        </parameter>
        <parameter>
          <name>skip</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Set this to &apos;true&apos; to bypass unit tests entirely. Its use is NOT RECOMMENDED, especially if you enable it using the &apos;maven.test.skip&apos; property, because maven.test.skip disables both running the tests and compiling the tests. Consider using the skipTests parameter instead.</description>
        </parameter>
        <parameter>
          <name>skipAfterFailureCount</name>
          <type>int</type>
          <since>2.19</since>
          <required>false</required>
          <editable>true</editable>
          <description>Set to error/failure count in order to skip remaining tests. Due to race conditions in parallel/forked execution this may not be fully guaranteed.
Enable with system property -Dsurefire.skipAfterFailureCount=1 or any number greater than zero. Defaults to &apos;0&apos;.
See the prerequisites and limitations in documentation:
http://maven.apache.org/plugins/maven-surefire-plugin/examples/skip-after-failure.html</description>
        </parameter>
        <parameter>
          <name>skipExec</name>
          <type>boolean</type>
          <since>2.3</since>
          <deprecated>Use skipTests instead.</deprecated>
          <required>false</required>
          <editable>true</editable>
          <description>This old parameter is just like skipTests, but bound to the old property &apos;maven.test.skip.exec&apos;.</description>
        </parameter>
        <parameter>
          <name>skipTests</name>
          <type>boolean</type>
          <since>2.4</since>
          <required>false</required>
          <editable>true</editable>
          <description>Set this to &apos;true&apos; to skip running tests, but still compile them. Its use is NOT RECOMMENDED, but quite convenient on occasion.</description>
        </parameter>
        <parameter>
          <name>suiteXmlFiles</name>
          <type>java.io.File[]</type>
          <since>2.2</since>
          <required>false</required>
          <editable>true</editable>
          <description>(TestNG) List of &lt;suiteXmlFile&gt; elements specifying TestNG suite xml file locations. Note that suiteXmlFiles is incompatible with several other parameters of this plugin, like includes and excludes.
This parameter is ignored if the test parameter is specified (allowing you to run a single test instead of an entire suite).</description>
        </parameter>
        <parameter>
          <name>systemProperties</name>
          <type>java.util.Properties</type>
          <deprecated>Use systemPropertyVariables instead.</deprecated>
          <required>false</required>
          <editable>true</editable>
          <description>List of System properties to pass to the JUnit tests.</description>
        </parameter>
        <parameter>
          <name>systemPropertiesFile</name>
          <type>java.io.File</type>
          <since>2.8.2</since>
          <required>false</required>
          <editable>true</editable>
          <description>List of System properties, loaded from a file, to pass to the JUnit tests.</description>
        </parameter>
        <parameter>
          <name>systemPropertyVariables</name>
          <type>java.util.Map</type>
          <since>2.5</since>
          <required>false</required>
          <editable>true</editable>
          <description>List of System properties to pass to the JUnit tests.</description>
        </parameter>
        <parameter>
          <name>tempDir</name>
          <type>java.lang.String</type>
          <since>2.20</since>
          <required>false</required>
          <editable>true</editable>
          <description>Relative path to temporary-surefire-boot directory containing internal Surefire temporary files.
The temporary-surefire-boot directory is project.build.directory on most platforms or system default temporary-directory specified by the system property java.io.tmpdir on Windows (see SUREFIRE-1400).
It is deleted after the test set has completed.</description>
        </parameter>
        <parameter>
          <name>test</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specify this parameter to run individual tests by file name, overriding the parameter includes and excludes. Each pattern you specify here will be used to create an include pattern formatted like **/${test}.java, so you can just type -Dtest=MyTest to run a single test called &apos;foo/MyTest.java&apos;. The test patterns prefixed with a ! will be excluded.
This parameter overrides the parameter includes, excludes, and the TestNG parameter suiteXmlFiles.
Since 2.7.3, you can execute a limited number of methods in the test by adding #myMethod or #my*ethod. For example, -Dtest=MyTest#myMethod. This is supported for junit 4.x and TestNg.

Since 2.19 a complex syntax is supported in one parameter (JUnit 4, JUnit 4.7+, TestNG):
&apos;-Dtest=???Test, !Unstable*, pkg/**/Ci*leTest.java, *Test#test*One+testTwo?????, #fast*+slowTest&apos;

or e.g.
&apos;-Dtest=Basic*, !%regex[.*.Unstable.*], !%regex[.*.MyTest.class#one.*|two.*], %regex[#fast.*|slow.*]&apos;


The Parameterized JUnit runner describes test methods using an index in brackets, so the non-regex method pattern would become: #testMethod[*]. If using @Parameters(name=&apos;{index}: fib({0})={1}&apos;) and selecting the index e.g. 5 in pattern, the non-regex method pattern would become #testMethod[5:*].</description>
        </parameter>
        <parameter>
          <name>testClassesDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>The directory containing generated test classes of the project being tested. This will be included at the beginning of the test classpath. *</description>
        </parameter>
        <parameter>
          <name>testFailureIgnore</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Set this to &apos;true&apos; to ignore a failure during testing. Its use is NOT RECOMMENDED, but quite convenient on occasion.</description>
        </parameter>
        <parameter>
          <name>testNGArtifactName</name>
          <type>java.lang.String</type>
          <since>2.3.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>Allows you to specify the name of the TestNG artifact. If not set, org.testng:testng will be used.</description>
        </parameter>
        <parameter>
          <name>testSourceDirectory</name>
          <type>java.io.File</type>
          <since>2.2</since>
          <required>true</required>
          <editable>true</editable>
          <description>The test source directory containing test class sources.</description>
        </parameter>
        <parameter>
          <name>threadCount</name>
          <type>int</type>
          <since>2.2</since>
          <required>false</required>
          <editable>true</editable>
          <description>(TestNG/JUnit 4.7 provider) The attribute thread-count allows you to specify how many threads should be allocated for this execution. Only makes sense to use in conjunction with the parallel parameter.</description>
        </parameter>
        <parameter>
          <name>threadCountClasses</name>
          <type>int</type>
          <since>2.16</since>
          <required>false</required>
          <editable>true</editable>
          <description>(JUnit 4.7 provider) This attribute allows you to specify the concurrency in test classes, i.e.:
-	number of concurrent classes if threadCount is 0 or unspecified
-	limited classes concurrency if useUnlimitedThreads is set to true
-	if threadCount and certain thread-count parameters are &gt; 0 for parallel, the concurrency is computed from ratio. For instance parallel=all and the ratio between threadCountSuites:threadCountClasses:threadCountMethods is 2:3:5, there is 30% of threadCount in concurrent classes.
-	as in the previous case but without this leaf thread-count. Example: parallel=suitesAndClasses, threadCount=16, threadCountSuites=5, threadCountClasses is unspecified leaf, the number of concurrent classes is varying from &gt;= 11 to 14 or 15. The threadCountSuites become given number of threads.
Only makes sense to use in conjunction with the parallel parameter. The default value 0 behaves same as unspecified one.</description>
        </parameter>
        <parameter>
          <name>threadCountMethods</name>
          <type>int</type>
          <since>2.16</since>
          <required>false</required>
          <editable>true</editable>
          <description>(JUnit 4.7 provider) This attribute allows you to specify the concurrency in test methods, i.e.:
-	number of concurrent methods if threadCount is 0 or unspecified
-	limited concurrency of methods if useUnlimitedThreads is set to true
-	if threadCount and certain thread-count parameters are &gt; 0 for parallel, the concurrency is computed from ratio. For instance parallel=all and the ratio between threadCountSuites:threadCountClasses:threadCountMethods is 2:3:5, there is 50% of threadCount which appears in concurrent methods.
-	as in the previous case but without this leaf thread-count. Example: parallel=all, threadCount=16, threadCountSuites=2, threadCountClasses=3, but threadCountMethods is unspecified leaf, the number of concurrent methods is varying from &gt;= 11 to 14 or 15. The threadCountSuites and threadCountClasses become given number of threads.
Only makes sense to use in conjunction with the parallel parameter. The default value 0 behaves same as unspecified one.</description>
        </parameter>
        <parameter>
          <name>threadCountSuites</name>
          <type>int</type>
          <since>2.16</since>
          <required>false</required>
          <editable>true</editable>
          <description>(JUnit 4.7 provider) This attribute allows you to specify the concurrency in test suites, i.e.:
-	number of concurrent suites if threadCount is 0 or unspecified
-	limited suites concurrency if useUnlimitedThreads is set to true
-	if threadCount and certain thread-count parameters are &gt; 0 for parallel, the concurrency is computed from ratio. For instance parallel=all and the ratio between threadCountSuites:threadCountClasses:threadCountMethods is 2:3:5, there is 20% of threadCount which appeared in concurrent suites.
Only makes sense to use in conjunction with the parallel parameter. The default value 0 behaves same as unspecified one.</description>
        </parameter>
        <parameter>
          <name>trimStackTrace</name>
          <type>boolean</type>
          <since>2.2</since>
          <required>false</required>
          <editable>true</editable>
          <description>Whether to trim the stack trace in the reports to just the lines within the test, or show the full trace.</description>
        </parameter>
        <parameter>
          <name>updateDiffChecksums</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Set this to &apos;true&apos; to update test dependencies on disk. The default value of &apos;false&apos; is useful for &apos;dry runs&apos; where one may want to see the diff without updating the test dependencies.</description>
        </parameter>
        <parameter>
          <name>updateRunChecksums</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Set this to &apos;false&apos; to prevent checksums from being persisted to disk. This is useful for &apos;dry runs&apos; where one may want to see the non-affected tests that STARTS writes to the Surefire excludesFile, without updating test dependencies.</description>
        </parameter>
        <parameter>
          <name>useFile</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Option to generate a file test report or just output the test report to the console.</description>
        </parameter>
        <parameter>
          <name>useManifestOnlyJar</name>
          <type>boolean</type>
          <since>2.4.3</since>
          <required>false</required>
          <editable>true</editable>
          <description>By default, Surefire forks your tests using a manifest-only JAR; set this parameter to &apos;false&apos; to force it to launch your tests with a plain old Java classpath. (See the http://maven.apache.org/plugins/maven-surefire-plugin/examples/class-loading.html for a more detailed explanation of manifest-only JARs and their benefits.)
Beware, setting this to &apos;false&apos; may cause your tests to fail on Windows if your classpath is too long.</description>
        </parameter>
        <parameter>
          <name>useSystemClassLoader</name>
          <type>boolean</type>
          <since>2.3</since>
          <required>false</required>
          <editable>true</editable>
          <description>Option to pass dependencies to the system&apos;s classloader instead of using an isolated class loader when forking. Prevents problems with JDKs which implement the service provider lookup mechanism by using the system&apos;s ClassLoader.</description>
        </parameter>
        <parameter>
          <name>useUnlimitedThreads</name>
          <type>boolean</type>
          <since>2.5</since>
          <required>false</required>
          <editable>true</editable>
          <description>(JUnit 4.7 provider) Indicates that the thread pool will be unlimited. The parallel parameter and the actual number of classes/methods will decide. Setting this to &apos;true&apos; effectively disables perCoreThreadCount and threadCount. Defaults to &apos;false&apos;.</description>
        </parameter>
        <parameter>
          <name>workingDirectory</name>
          <type>java.io.File</type>
          <since>2.1.3</since>
          <required>false</required>
          <editable>true</editable>
          <description>Command line working directory.</description>
        </parameter>
        <parameter>
          <name>writeChangedClasses</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Set this to &apos;true&apos; to save changedClasses to a file on disk. Note: Running with &apos;-DstartsLogging=FINEST&apos; also saves changedClasses to a file on disk.</description>
        </parameter>
        <parameter>
          <name>writeNonAffected</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Set this to &apos;true&apos; to save nonAffectedTests to a file on disk. This improves the time for updating test dependencies in offline mode by not running computeChangeData() twice. Note: Running with &apos;-DstartsLogging=FINEST&apos; also saves nonAffectedTests to a file on disk.</description>
        </parameter>
      </parameters>
      <configuration>
        <additionalClasspathElements implementation="java.lang.String[]">${maven.test.additionalClasspath}</additionalClasspathElements>
        <argLine implementation="java.lang.String">${argLine}</argLine>
        <basedir implementation="java.io.File" default-value="${basedir}"/>
        <childDelegation implementation="boolean" default-value="false">${childDelegation}</childDelegation>
        <classesDirectory implementation="java.io.File" default-value="${project.build.outputDirectory}"/>
        <classpathDependencyExcludes implementation="java.lang.String[]">${maven.test.dependency.excludes}</classpathDependencyExcludes>
        <cleanBytes implementation="boolean" default-value="true">${cleanBytes}</cleanBytes>
        <debugForkedProcess implementation="java.lang.String">${maven.surefire.debug}</debugForkedProcess>
        <dependenciesToScan implementation="java.lang.String[]">${dependenciesToScan}</dependenciesToScan>
        <depFormat implementation="edu.illinois.starts.enums.DependencyFormat" default-value="ZLC">${depFormat}</depFormat>
        <disableXmlReport implementation="boolean" default-value="false">${disableXmlReport}</disableXmlReport>
        <enableAssertions implementation="boolean" default-value="true">${enableAssertions}</enableAssertions>
        <excludedGroups implementation="java.lang.String">${excludedGroups}</excludedGroups>
        <excludesFile implementation="java.io.File">${surefire.excludesFile}</excludesFile>
        <failIfNoSpecifiedTests implementation="java.lang.Boolean">${surefire.failIfNoSpecifiedTests}</failIfNoSpecifiedTests>
        <failIfNoTests implementation="java.lang.Boolean">${failIfNoTests}</failIfNoTests>
        <filterLib implementation="boolean" default-value="false">${filterLib}</filterLib>
        <forkCount implementation="java.lang.String" default-value="1">${forkCount}</forkCount>
        <forkedProcessExitTimeoutInSeconds implementation="int" default-value="30">${surefire.exitTimeout}</forkedProcessExitTimeoutInSeconds>
        <forkedProcessTimeoutInSeconds implementation="int">${surefire.timeout}</forkedProcessTimeoutInSeconds>
        <forkMode implementation="java.lang.String" default-value="once">${forkMode}</forkMode>
        <graphCache implementation="java.lang.String" default-value="${basedir}${file.separator}jdeps-cache">${gCache}</graphCache>
        <groups implementation="java.lang.String">${groups}</groups>
        <includesFile implementation="java.io.File">${surefire.includesFile}</includesFile>
        <junitArtifactName implementation="java.lang.String" default-value="junit:junit">${junitArtifactName}</junitArtifactName>
        <jvm implementation="java.lang.String">${jvm}</jvm>
        <loggingLevel implementation="java.lang.String" default-value="CONFIG">${startsLogging}</loggingLevel>
        <objectFactory implementation="java.lang.String">${objectFactory}</objectFactory>
        <parallel implementation="java.lang.String">${parallel}</parallel>
        <parallelOptimized implementation="boolean" default-value="true">${parallelOptimized}</parallelOptimized>
        <parallelTestsTimeoutForcedInSeconds implementation="double">${surefire.parallel.forcedTimeout}</parallelTestsTimeoutForcedInSeconds>
        <parallelTestsTimeoutInSeconds implementation="double">${surefire.parallel.timeout}</parallelTestsTimeoutInSeconds>
        <perCoreThreadCount implementation="boolean" default-value="true">${perCoreThreadCount}</perCoreThreadCount>
        <printGraph implementation="boolean" default-value="true">${printGraph}</printGraph>
        <printSummary implementation="boolean" default-value="true">${surefire.printSummary}</printSummary>
        <redirectTestOutputToFile implementation="boolean" default-value="false">${maven.test.redirectTestOutputToFile}</redirectTestOutputToFile>
        <remoteRepositories implementation="java.util.List" default-value="${project.pluginArtifactRepositories}"/>
        <reportFormat implementation="java.lang.String" default-value="brief">${surefire.reportFormat}</reportFormat>
        <reportNameSuffix implementation="java.lang.String" default-value="">${surefire.reportNameSuffix}</reportNameSuffix>
        <reportsDirectory implementation="java.io.File" default-value="${project.build.directory}/surefire-reports"/>
        <rerunFailingTestsCount implementation="int" default-value="0">${surefire.rerunFailingTestsCount}</rerunFailingTestsCount>
        <retestAll implementation="boolean" default-value="false">${retestAll}</retestAll>
        <reuseForks implementation="boolean" default-value="true">${reuseForks}</reuseForks>
        <runOrder implementation="java.lang.String" default-value="filesystem">${surefire.runOrder}</runOrder>
        <shutdown implementation="java.lang.String" default-value="testset">${surefire.shutdown}</shutdown>
        <skip implementation="boolean" default-value="false">${maven.test.skip}</skip>
        <skipAfterFailureCount implementation="int" default-value="0">${surefire.skipAfterFailureCount}</skipAfterFailureCount>
        <skipExec implementation="boolean">${maven.test.skip.exec}</skipExec>
        <skipTests implementation="boolean" default-value="false">${skipTests}</skipTests>
        <suiteXmlFiles implementation="java.io.File[]">${surefire.suiteXmlFiles}</suiteXmlFiles>
        <tempDir implementation="java.lang.String" default-value="surefire">${tempDir}</tempDir>
        <test implementation="java.lang.String">${test}</test>
        <testClassesDirectory implementation="java.io.File" default-value="${project.build.testOutputDirectory}"/>
        <testFailureIgnore implementation="boolean" default-value="false">${maven.test.failure.ignore}</testFailureIgnore>
        <testNGArtifactName implementation="java.lang.String" default-value="org.testng:testng">${testNGArtifactName}</testNGArtifactName>
        <testSourceDirectory implementation="java.io.File" default-value="${project.build.testSourceDirectory}"/>
        <threadCount implementation="int">${threadCount}</threadCount>
        <threadCountClasses implementation="int" default-value="0">${threadCountClasses}</threadCountClasses>
        <threadCountMethods implementation="int" default-value="0">${threadCountMethods}</threadCountMethods>
        <threadCountSuites implementation="int" default-value="0">${threadCountSuites}</threadCountSuites>
        <trimStackTrace implementation="boolean" default-value="true">${trimStackTrace}</trimStackTrace>
        <updateDiffChecksums implementation="boolean" default-value="false">${updateDiffChecksums}</updateDiffChecksums>
        <updateRunChecksums implementation="boolean" default-value="true">${updateRunChecksums}</updateRunChecksums>
        <useFile implementation="boolean" default-value="true">${surefire.useFile}</useFile>
        <useManifestOnlyJar implementation="boolean" default-value="true">${surefire.useManifestOnlyJar}</useManifestOnlyJar>
        <useSystemClassLoader implementation="boolean" default-value="true">${surefire.useSystemClassLoader}</useSystemClassLoader>
        <useUnlimitedThreads implementation="boolean" default-value="false">${useUnlimitedThreads}</useUnlimitedThreads>
        <workingDirectory implementation="java.io.File">${basedir}</workingDirectory>
        <writeChangedClasses implementation="boolean" default-value="false">${writeChangedClasses}</writeChangedClasses>
        <writeNonAffected implementation="boolean" default-value="false">${writeNonAffected}</writeNonAffected>
      </configuration>
    </mojo>
    <mojo>
      <goal>select</goal>
      <description>Finds tests affected by a change but does not run them.</description>
      <requiresDependencyResolution>test</requiresDependencyResolution>
      <requiresDirectInvocation>true</requiresDirectInvocation>
      <requiresProject>true</requiresProject>
      <requiresReports>false</requiresReports>
      <aggregator>false</aggregator>
      <requiresOnline>false</requiresOnline>
      <inheritedByDefault>true</inheritedByDefault>
      <executePhase>test-compile</executePhase>
      <implementation>edu.illinois.starts.jdeps.SelectMojo</implementation>
      <language>java</language>
      <instantiationStrategy>per-lookup</instantiationStrategy>
      <executionStrategy>once-per-session</executionStrategy>
      <threadSafe>false</threadSafe>
      <parameters>
        <parameter>
          <name>additionalClasspathElements</name>
          <type>java.lang.String[]</type>
          <since>2.4</since>
          <required>false</required>
          <editable>true</editable>
          <description>Additional elements to be appended to the classpath.</description>
        </parameter>
        <parameter>
          <name>argLine</name>
          <type>java.lang.String</type>
          <since>2.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>Arbitrary JVM options to set on the command line.

Since the Version 2.17 using an alternate syntax for argLine, @{...} allows late replacement of properties when the plugin is executed, so properties that have been modified by other plugins will be picked up correctly. See the Frequently Asked Questions page with more details:
http://maven.apache.org/surefire/maven-surefire-plugin/faq.html
http://maven.apache.org/surefire/maven-failsafe-plugin/faq.html</description>
        </parameter>
        <parameter>
          <name>basedir</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>The base directory of the project being tested. This can be obtained in your integration test via System.getProperty(&apos;basedir&apos;).</description>
        </parameter>
        <parameter>
          <name>childDelegation</name>
          <type>boolean</type>
          <since>2.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>When false it makes tests run using the standard classloader delegation instead of the default Maven isolated classloader. Only used when forking (forkMode is not none).
Setting it to false helps with some problems caused by conflicts between xml parsers in the classpath and the Java 5 provider parser.</description>
        </parameter>
        <parameter>
          <name>classesDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>The directory containing generated classes of the project being tested. This will be included after the test classes in the test classpath.</description>
        </parameter>
        <parameter>
          <name>classpathDependencyExcludes</name>
          <type>java.lang.String[]</type>
          <since>2.6</since>
          <required>false</required>
          <editable>true</editable>
          <description>List of dependencies to exclude from the test classpath. Each dependency string must follow the format groupId:artifactId. For example: org.acme:project-a</description>
        </parameter>
        <parameter>
          <name>classpathDependencyScopeExclude</name>
          <type>java.lang.String</type>
          <since>2.6</since>
          <required>false</required>
          <editable>true</editable>
          <description>A dependency scope to exclude from the test classpath. The scope should be one of the scopes defined by org.apache.maven.artifact.Artifact. This includes the following:

-	compile - system, provided, compile
-	runtime - compile, runtime
-	compile+runtime - system, provided, compile, runtime
-	runtime+system - system, compile, runtime
-	test - system, provided, compile, runtime, test
</description>
        </parameter>
        <parameter>
          <name>cleanBytes</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Set this to &apos;false&apos; to disable smart hashing, i.e., to *not* strip Bytecode files of debug info prior to computing checksums. See the &apos;Smart Checksums&apos; Sections in the Ekstazi paper: http://dl.acm.org/citation.cfm?id=2771784</description>
        </parameter>
        <parameter>
          <name>debugForkedProcess</name>
          <type>java.lang.String</type>
          <since>2.4</since>
          <required>false</required>
          <editable>true</editable>
          <description>Attach a debugger to the forked JVM. If set to &apos;true&apos;, the process will suspend and wait for a debugger to attach on port 5005. If set to some other string, that string will be appended to the argLine, allowing you to configure arbitrary debuggability options (without overwriting the other options specified through the argLine parameter).</description>
        </parameter>
        <parameter>
          <name>dependenciesToScan</name>
          <type>java.lang.String[]</type>
          <since>2.15</since>
          <required>false</required>
          <editable>true</editable>
          <description>List of dependencies to scan for test classes to include in the test run. The child elements of this element must be &lt;dependency&gt; elements, and the contents of each of these elements must be a string which follows the format: groupId:artifactId. For example: org.acme:project-a.</description>
        </parameter>
        <parameter>
          <name>depFormat</name>
          <type>edu.illinois.starts.enums.DependencyFormat</type>
          <required>false</required>
          <editable>true</editable>
          <description>Allows to switch the format in which we want to store the test dependencies. A full list of what we currently support can be found in</description>
        </parameter>
        <parameter>
          <name>disableXmlReport</name>
          <type>boolean</type>
          <since>2.2</since>
          <required>false</required>
          <editable>true</editable>
          <description>Flag to disable the generation of report files in xml format.</description>
        </parameter>
        <parameter>
          <name>enableAssertions</name>
          <type>boolean</type>
          <since>2.3.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>By default, Surefire enables JVM assertions for the execution of your test cases. To disable the assertions, set this flag to &apos;false&apos;.</description>
        </parameter>
        <parameter>
          <name>environmentVariables</name>
          <type>java.util.Map</type>
          <since>2.1.3</since>
          <required>false</required>
          <editable>true</editable>
          <description>Additional environment variables to set on the command line.</description>
        </parameter>
        <parameter>
          <name>excludedGroups</name>
          <type>java.lang.String</type>
          <since>2.2</since>
          <required>false</required>
          <editable>true</editable>
          <description>(TestNG/JUnit47 provider with JUnit4.8+ only) Excluded groups. Any methods/classes/etc with one of the groups specified in this list will specifically not be run.
For JUnit, this parameter forces the use of the 4.7 provider.
This parameter is ignored if the suiteXmlFiles parameter is specified.
Since version 2.18.1 and JUnit 4.12, the @Category annotation type is automatically inherited from superclasses, see @java.lang.annotation.Inherited. Make sure that test class inheritance still makes sense together with @Category annotation of the JUnit 4.12 or higher appeared in superclass.</description>
        </parameter>
        <parameter>
          <name>excludes</name>
          <type>java.util.List</type>
          <required>false</required>
          <editable>true</editable>
          <description>A list of &lt;exclude&gt; elements specifying the tests (by pattern) that should be excluded in testing. When not specified and when the test parameter is not specified, the default excludes will be

&lt;excludes&gt;
    &lt;exclude&gt;**/*$*&lt;/exclude&gt;
&lt;/excludes&gt;

(which excludes all inner classes).
This parameter is ignored if the TestNG suiteXmlFiles parameter is specified.
Each exclude item may also contain a comma-separated sub-list of items, which will be treated as multiple Â &lt;exclude&gt; entries.
Since 2.19 a complex syntax is supported in one parameter (JUnit 4, JUnit 4.7+, TestNG):
&lt;exclude&gt;%regex[pkg.*Slow.*.class], Unstable*&lt;/exclude&gt;


Notice that these values are relative to the directory containing generated test classes of the project being tested. This directory is declared by the parameter testClassesDirectory which defaults to the POM property ${project.build.testOutputDirectory}, typically src/test/java unless overridden.</description>
        </parameter>
        <parameter>
          <name>excludesFile</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>A file containing exclude patterns. Blank lines, or lines starting with # are ignored. If excludes are also specified, these patterns are appended. Example with path, simple and regex excludes:

*/test/*
**/DontRunTest.*
%regex[.*Test.*|.*Not.*]

</description>
        </parameter>
        <parameter>
          <name>failIfNoSpecifiedTests</name>
          <type>java.lang.Boolean</type>
          <since>2.12</since>
          <required>false</required>
          <editable>true</editable>
          <description>Set this to &apos;true&apos; to cause a failure if none of the tests specified in -Dtest=... are run. Defaults to &apos;true&apos;.</description>
        </parameter>
        <parameter>
          <name>failIfNoTests</name>
          <type>java.lang.Boolean</type>
          <since>2.4</since>
          <required>false</required>
          <editable>true</editable>
          <description>Set this to &apos;true&apos; to cause a failure if there are no tests to run. Defaults to &apos;false&apos;.</description>
        </parameter>
        <parameter>
          <name>filterLib</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Set this to &apos;false&apos; to not filter out &apos;sun.*&apos; and &apos;java.*&apos; classes from jdeps parsing.</description>
        </parameter>
        <parameter>
          <name>forkCount</name>
          <type>java.lang.String</type>
          <since>2.14</since>
          <required>false</required>
          <editable>true</editable>
          <description>Option to specify the number of VMs to fork in parallel in order to execute the tests. When terminated with &apos;C&apos;, the number part is multiplied with the number of CPU cores. Floating point value are only accepted together with &apos;C&apos;. If set to &apos;0&apos;, no VM is forked and all tests are executed within the main process.

Example values: &apos;1.5C&apos;, &apos;4&apos;

The system properties and the argLine of the forked processes may contain the place holder string ${surefire.forkNumber}, which is replaced with a fixed number for each of the parallel forks, ranging from 1 to the effective value of forkCount times the maximum number of parallel Surefire executions in maven parallel builds, i.e. the effective value of the -T command line argument of maven core.</description>
        </parameter>
        <parameter>
          <name>forkedProcessExitTimeoutInSeconds</name>
          <type>int</type>
          <since>2.20</since>
          <required>false</required>
          <editable>true</editable>
          <description>Forked process is normally terminated without any significant delay after given tests have completed. If the particular tests started non-daemon Thread(s), the process hangs instead of been properly terminated by System.exit(). Use this parameter in order to determine the timeout of terminating the process. see the documentation: http://maven.apache.org/surefire/maven-surefire-plugin/examples/shutdown.html Turns to default fallback value of 30 seconds if negative integer.</description>
        </parameter>
        <parameter>
          <name>forkedProcessTimeoutInSeconds</name>
          <type>int</type>
          <since>2.4</since>
          <required>false</required>
          <editable>true</editable>
          <description>Kill the forked test process after a certain number of seconds. If set to 0, wait forever for the process, never timing out.</description>
        </parameter>
        <parameter>
          <name>forkMode</name>
          <type>java.lang.String</type>
          <since>2.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>DEPRECATED since version 2.14. Use forkCount and reuseForks instead.

Option to specify the forking mode. Can be never, once, always, perthread.
The none and pertest are also accepted for backwards compatibility.
The always forks for each test-class.
The perthread creates the number of parallel forks specified by threadCount, where each forked JVM is executing one test-class. See also the parameter reuseForks for the lifetime of JVM.</description>
        </parameter>
        <parameter>
          <name>graphCache</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Path to directory that contains the result of running jdeps on third-party and standard library jars that an application may need, e.g., those in M2_REPO.</description>
        </parameter>
        <parameter>
          <name>groups</name>
          <type>java.lang.String</type>
          <since>2.2</since>
          <required>false</required>
          <editable>true</editable>
          <description>(TestNG/JUnit47 provider with JUnit4.8+ only) Groups for this test. Only classes/methods/etc decorated with one of the groups specified here will be included in test run, if specified.
For JUnit, this parameter forces the use of the 4.7 provider
This parameter is ignored if the suiteXmlFiles parameter is specified.
Since version 2.18.1 and JUnit 4.12, the @Category annotation type is automatically inherited from superclasses, see @java.lang.annotation.Inherited. Make sure that test class inheritance still makes sense together with @Category annotation of the JUnit 4.12 or higher appeared in superclass.</description>
        </parameter>
        <parameter>
          <name>includes</name>
          <type>java.util.List</type>
          <required>false</required>
          <editable>true</editable>
          <description>A list of &lt;include&gt; elements specifying the tests (by pattern) that should be included in testing. When not specified and when the test parameter is not specified, the default includes will be
&lt;includes&gt;
    &lt;include&gt;**/Test*.java&lt;/include&gt;
    &lt;include&gt;**/*Test.java&lt;/include&gt;
    &lt;include&gt;**/*Tests.java&lt;/include&gt;
    &lt;include&gt;**/*TestCase.java&lt;/include&gt;
&lt;/includes&gt;

Each include item may also contain a comma-separated sub-list of items, which will be treated as multiple Â &lt;include&gt; entries.
Since 2.19 a complex syntax is supported in one parameter (JUnit 4, JUnit 4.7+, TestNG):



&lt;include&gt;%regex[.*[Cat|Dog].*], Basic????, !Unstable*&lt;/include&gt; &lt;include&gt;%regex[.*[Cat|Dog].*], !%regex[pkg.*Slow.*.class], pkg/**/*Fast*.java&lt;/include&gt;
This parameter is ignored if the TestNG suiteXmlFiles parameter is specified.

Notice that these values are relative to the directory containing generated test classes of the project being tested. This directory is declared by the parameter testClassesDirectory which defaults to the POM property ${project.build.testOutputDirectory}, typically src/test/java unless overridden.</description>
        </parameter>
        <parameter>
          <name>includesFile</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>A file containing include patterns. Blank lines, or lines starting with # are ignored. If includes are also specified, these patterns are appended. Example with path, simple and regex includes:
*/test/*
**/NotIncludedByDefault.java
%regex[.*Test.*|.*Not.*]

</description>
        </parameter>
        <parameter>
          <name>junitArtifactName</name>
          <type>java.lang.String</type>
          <since>2.3.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>Allows you to specify the name of the JUnit artifact. If not set, junit:junit will be used.</description>
        </parameter>
        <parameter>
          <name>jvm</name>
          <type>java.lang.String</type>
          <since>2.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>Option to specify the jvm (or path to the java executable) to use with the forking options. For the default, the jvm will be a new instance of the same VM as the one used to run Maven. JVM settings are not inherited from MAVEN_OPTS.</description>
        </parameter>
        <parameter>
          <name>loggingLevel</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Log levels as defined in java.util.logging.Level.</description>
        </parameter>
        <parameter>
          <name>objectFactory</name>
          <type>java.lang.String</type>
          <since>2.5</since>
          <required>false</required>
          <editable>true</editable>
          <description>(TestNG only) Define the factory class used to create all test instances.</description>
        </parameter>
        <parameter>
          <name>parallel</name>
          <type>java.lang.String</type>
          <since>2.2</since>
          <required>false</required>
          <editable>true</editable>
          <description>(TestNG provider) When you use the parameter parallel, TestNG will try to run all your test methods in separate threads, except for methods that depend on each other, which will be run in the same thread in order to respect their order of execution.
(JUnit 4.7 provider) Supports values classes, methods, both to run in separate threads been controlled by threadCount.

Since version 2.16 (JUnit 4.7 provider), the value both is DEPRECATED. Use classesAndMethods instead.

Since version 2.16 (JUnit 4.7 provider), additional vales are available:
suites, suitesAndClasses, suitesAndMethods, classesAndMethods, all.</description>
        </parameter>
        <parameter>
          <name>parallelOptimized</name>
          <type>boolean</type>
          <since>2.17</since>
          <required>false</required>
          <editable>true</editable>
          <description>(JUnit 4.7 / provider only) The thread counts do not exceed the number of parallel suite, class runners and average number of methods per class if set to true.
True by default.</description>
        </parameter>
        <parameter>
          <name>parallelTestsTimeoutForcedInSeconds</name>
          <type>double</type>
          <since>2.16</since>
          <required>false</required>
          <editable>true</editable>
          <description>Stop executing queued parallel JUnit tests and interrupt currently running tests after a certain number of seconds.
Example values: &apos;3.5&apos;, &apos;4&apos;

If set to 0, wait forever, never timing out. Makes sense with specified parallel different from &apos;none&apos;.</description>
        </parameter>
        <parameter>
          <name>parallelTestsTimeoutInSeconds</name>
          <type>double</type>
          <since>2.16</since>
          <required>false</required>
          <editable>true</editable>
          <description>Stop executing queued parallel JUnit tests after a certain number of seconds.
Example values: &apos;3.5&apos;, &apos;4&apos;

If set to 0, wait forever, never timing out. Makes sense with specified parallel different from &apos;none&apos;.</description>
        </parameter>
        <parameter>
          <name>perCoreThreadCount</name>
          <type>boolean</type>
          <since>2.5</since>
          <required>false</required>
          <editable>true</editable>
          <description>(JUnit 4.7 provider) Indicates that threadCount, threadCountSuites, threadCountClasses, threadCountMethods are per cpu core.</description>
        </parameter>
        <parameter>
          <name>printGraph</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Set this to &apos;false&apos; to not print the graph obtained from jdeps parsing. When &apos;true&apos; the graph is written to file after the run.</description>
        </parameter>
        <parameter>
          <name>printSummary</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Option to print summary of test suites or just print the test cases that have errors.</description>
        </parameter>
        <parameter>
          <name>properties</name>
          <type>java.util.Properties</type>
          <since>2.4</since>
          <required>false</required>
          <editable>true</editable>
          <description>List of properties for configuring all TestNG related configurations. This is the new preferred method of configuring TestNG.</description>
        </parameter>
        <parameter>
          <name>redirectTestOutputToFile</name>
          <type>boolean</type>
          <since>2.3</since>
          <required>false</required>
          <editable>true</editable>
          <description>Set this to &apos;true&apos; to redirect the unit test standard output to a file (found in reportsDirectory/testName-output.txt).</description>
        </parameter>
        <parameter>
          <name>remoteRepositories</name>
          <type>java.util.List</type>
          <since>2.2</since>
          <required>false</required>
          <editable>true</editable>
          <description>The remote plugin repositories declared in the POM.</description>
        </parameter>
        <parameter>
          <name>reportFormat</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Selects the formatting for the test report to be generated. Can be set as &apos;brief&apos; or &apos;plain&apos;. Only applies to the output format of the output files (target/surefire-reports/testName.txt)</description>
        </parameter>
        <parameter>
          <name>reportNameSuffix</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Add custom text into report filename: TEST-testClassName-reportNameSuffix.xml, testClassName-reportNameSuffix.txt and testClassName-reportNameSuffix-output.txt. File TEST-testClassName-reportNameSuffix.xml has changed attributes &apos;testsuite&apos;--&apos;name&apos; and &apos;testcase&apos;--&apos;classname&apos; - reportNameSuffix is added to the attribute value.</description>
        </parameter>
        <parameter>
          <name>reportsDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>Base directory where all reports are written to.</description>
        </parameter>
        <parameter>
          <name>rerunFailingTestsCount</name>
          <type>int</type>
          <required>false</required>
          <editable>true</editable>
          <description>(JUnit 4+ providers) The number of times each failing test will be rerun. If set larger than 0, rerun failing tests immediately after they fail. If a failing test passes in any of those reruns, it will be marked as pass and reported as a &apos;flake&apos;. However, all the failing attempts will be recorded.</description>
        </parameter>
        <parameter>
          <name>reuseForks</name>
          <type>boolean</type>
          <since>2.13</since>
          <required>false</required>
          <editable>true</editable>
          <description>Indicates if forked VMs can be reused. If set to &apos;false&apos;, a new VM is forked for each test class to be executed. If set to &apos;true&apos;, up to forkCount VMs will be forked and then reused to execute all tests.</description>
        </parameter>
        <parameter>
          <name>runOrder</name>
          <type>java.lang.String</type>
          <since>2.7</since>
          <required>false</required>
          <editable>true</editable>
          <description>Defines the order the tests will be run in. Supported values are alphabetical, reversealphabetical, random, hourly (alphabetical on even hours, reverse alphabetical on odd hours), failedfirst, balanced and filesystem.

Odd/Even for hourly is determined at the time the of scanning the classpath, meaning it could change during a multi-module build.

Failed first will run tests that failed on previous run first, as well as new tests for this run.

Balanced is only relevant with parallel=classes, and will try to optimize the run-order of the tests reducing the overall execution time. Initially a statistics file is created and every next test run will reorder classes.

Note that the statistics are stored in a file named .surefire-XXXXXXXXX beside pom.xml and should not be checked into version control. The &apos;XXXXX&apos; is the SHA1 checksum of the entire surefire configuration, so different configurations will have different statistics files, meaning if you change any configuration settings you will re-run once before new statistics data can be established.</description>
        </parameter>
        <parameter>
          <name>shutdown</name>
          <type>java.lang.String</type>
          <since>2.19</since>
          <required>false</required>
          <editable>true</editable>
          <description>After the plugin process is shutdown by sending SIGTERM signal (CTRL+C), SHUTDOWN command is received by every forked JVM.
By default (shutdown=testset) forked JVM would not continue with new test which means that the current test may still continue to run.
The parameter can be configured with other two values exit and kill.
Using exit forked JVM executes System.exit(1) after the plugin process has received SIGTERM signal.
Using kill the JVM executes Runtime.halt(1) and kills itself.</description>
        </parameter>
        <parameter>
          <name>skip</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Set this to &apos;true&apos; to bypass unit tests entirely. Its use is NOT RECOMMENDED, especially if you enable it using the &apos;maven.test.skip&apos; property, because maven.test.skip disables both running the tests and compiling the tests. Consider using the skipTests parameter instead.</description>
        </parameter>
        <parameter>
          <name>skipAfterFailureCount</name>
          <type>int</type>
          <since>2.19</since>
          <required>false</required>
          <editable>true</editable>
          <description>Set to error/failure count in order to skip remaining tests. Due to race conditions in parallel/forked execution this may not be fully guaranteed.
Enable with system property -Dsurefire.skipAfterFailureCount=1 or any number greater than zero. Defaults to &apos;0&apos;.
See the prerequisites and limitations in documentation:
http://maven.apache.org/plugins/maven-surefire-plugin/examples/skip-after-failure.html</description>
        </parameter>
        <parameter>
          <name>skipExec</name>
          <type>boolean</type>
          <since>2.3</since>
          <deprecated>Use skipTests instead.</deprecated>
          <required>false</required>
          <editable>true</editable>
          <description>This old parameter is just like skipTests, but bound to the old property &apos;maven.test.skip.exec&apos;.</description>
        </parameter>
        <parameter>
          <name>skipTests</name>
          <type>boolean</type>
          <since>2.4</since>
          <required>false</required>
          <editable>true</editable>
          <description>Set this to &apos;true&apos; to skip running tests, but still compile them. Its use is NOT RECOMMENDED, but quite convenient on occasion.</description>
        </parameter>
        <parameter>
          <name>suiteXmlFiles</name>
          <type>java.io.File[]</type>
          <since>2.2</since>
          <required>false</required>
          <editable>true</editable>
          <description>(TestNG) List of &lt;suiteXmlFile&gt; elements specifying TestNG suite xml file locations. Note that suiteXmlFiles is incompatible with several other parameters of this plugin, like includes and excludes.
This parameter is ignored if the test parameter is specified (allowing you to run a single test instead of an entire suite).</description>
        </parameter>
        <parameter>
          <name>systemProperties</name>
          <type>java.util.Properties</type>
          <deprecated>Use systemPropertyVariables instead.</deprecated>
          <required>false</required>
          <editable>true</editable>
          <description>List of System properties to pass to the JUnit tests.</description>
        </parameter>
        <parameter>
          <name>systemPropertiesFile</name>
          <type>java.io.File</type>
          <since>2.8.2</since>
          <required>false</required>
          <editable>true</editable>
          <description>List of System properties, loaded from a file, to pass to the JUnit tests.</description>
        </parameter>
        <parameter>
          <name>systemPropertyVariables</name>
          <type>java.util.Map</type>
          <since>2.5</since>
          <required>false</required>
          <editable>true</editable>
          <description>List of System properties to pass to the JUnit tests.</description>
        </parameter>
        <parameter>
          <name>tempDir</name>
          <type>java.lang.String</type>
          <since>2.20</since>
          <required>false</required>
          <editable>true</editable>
          <description>Relative path to temporary-surefire-boot directory containing internal Surefire temporary files.
The temporary-surefire-boot directory is project.build.directory on most platforms or system default temporary-directory specified by the system property java.io.tmpdir on Windows (see SUREFIRE-1400).
It is deleted after the test set has completed.</description>
        </parameter>
        <parameter>
          <name>test</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specify this parameter to run individual tests by file name, overriding the parameter includes and excludes. Each pattern you specify here will be used to create an include pattern formatted like **/${test}.java, so you can just type -Dtest=MyTest to run a single test called &apos;foo/MyTest.java&apos;. The test patterns prefixed with a ! will be excluded.
This parameter overrides the parameter includes, excludes, and the TestNG parameter suiteXmlFiles.
Since 2.7.3, you can execute a limited number of methods in the test by adding #myMethod or #my*ethod. For example, -Dtest=MyTest#myMethod. This is supported for junit 4.x and TestNg.

Since 2.19 a complex syntax is supported in one parameter (JUnit 4, JUnit 4.7+, TestNG):
&apos;-Dtest=???Test, !Unstable*, pkg/**/Ci*leTest.java, *Test#test*One+testTwo?????, #fast*+slowTest&apos;

or e.g.
&apos;-Dtest=Basic*, !%regex[.*.Unstable.*], !%regex[.*.MyTest.class#one.*|two.*], %regex[#fast.*|slow.*]&apos;


The Parameterized JUnit runner describes test methods using an index in brackets, so the non-regex method pattern would become: #testMethod[*]. If using @Parameters(name=&apos;{index}: fib({0})={1}&apos;) and selecting the index e.g. 5 in pattern, the non-regex method pattern would become #testMethod[5:*].</description>
        </parameter>
        <parameter>
          <name>testClassesDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>The directory containing generated test classes of the project being tested. This will be included at the beginning of the test classpath. *</description>
        </parameter>
        <parameter>
          <name>testFailureIgnore</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Set this to &apos;true&apos; to ignore a failure during testing. Its use is NOT RECOMMENDED, but quite convenient on occasion.</description>
        </parameter>
        <parameter>
          <name>testNGArtifactName</name>
          <type>java.lang.String</type>
          <since>2.3.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>Allows you to specify the name of the TestNG artifact. If not set, org.testng:testng will be used.</description>
        </parameter>
        <parameter>
          <name>testSourceDirectory</name>
          <type>java.io.File</type>
          <since>2.2</since>
          <required>true</required>
          <editable>true</editable>
          <description>The test source directory containing test class sources.</description>
        </parameter>
        <parameter>
          <name>threadCount</name>
          <type>int</type>
          <since>2.2</since>
          <required>false</required>
          <editable>true</editable>
          <description>(TestNG/JUnit 4.7 provider) The attribute thread-count allows you to specify how many threads should be allocated for this execution. Only makes sense to use in conjunction with the parallel parameter.</description>
        </parameter>
        <parameter>
          <name>threadCountClasses</name>
          <type>int</type>
          <since>2.16</since>
          <required>false</required>
          <editable>true</editable>
          <description>(JUnit 4.7 provider) This attribute allows you to specify the concurrency in test classes, i.e.:
-	number of concurrent classes if threadCount is 0 or unspecified
-	limited classes concurrency if useUnlimitedThreads is set to true
-	if threadCount and certain thread-count parameters are &gt; 0 for parallel, the concurrency is computed from ratio. For instance parallel=all and the ratio between threadCountSuites:threadCountClasses:threadCountMethods is 2:3:5, there is 30% of threadCount in concurrent classes.
-	as in the previous case but without this leaf thread-count. Example: parallel=suitesAndClasses, threadCount=16, threadCountSuites=5, threadCountClasses is unspecified leaf, the number of concurrent classes is varying from &gt;= 11 to 14 or 15. The threadCountSuites become given number of threads.
Only makes sense to use in conjunction with the parallel parameter. The default value 0 behaves same as unspecified one.</description>
        </parameter>
        <parameter>
          <name>threadCountMethods</name>
          <type>int</type>
          <since>2.16</since>
          <required>false</required>
          <editable>true</editable>
          <description>(JUnit 4.7 provider) This attribute allows you to specify the concurrency in test methods, i.e.:
-	number of concurrent methods if threadCount is 0 or unspecified
-	limited concurrency of methods if useUnlimitedThreads is set to true
-	if threadCount and certain thread-count parameters are &gt; 0 for parallel, the concurrency is computed from ratio. For instance parallel=all and the ratio between threadCountSuites:threadCountClasses:threadCountMethods is 2:3:5, there is 50% of threadCount which appears in concurrent methods.
-	as in the previous case but without this leaf thread-count. Example: parallel=all, threadCount=16, threadCountSuites=2, threadCountClasses=3, but threadCountMethods is unspecified leaf, the number of concurrent methods is varying from &gt;= 11 to 14 or 15. The threadCountSuites and threadCountClasses become given number of threads.
Only makes sense to use in conjunction with the parallel parameter. The default value 0 behaves same as unspecified one.</description>
        </parameter>
        <parameter>
          <name>threadCountSuites</name>
          <type>int</type>
          <since>2.16</since>
          <required>false</required>
          <editable>true</editable>
          <description>(JUnit 4.7 provider) This attribute allows you to specify the concurrency in test suites, i.e.:
-	number of concurrent suites if threadCount is 0 or unspecified
-	limited suites concurrency if useUnlimitedThreads is set to true
-	if threadCount and certain thread-count parameters are &gt; 0 for parallel, the concurrency is computed from ratio. For instance parallel=all and the ratio between threadCountSuites:threadCountClasses:threadCountMethods is 2:3:5, there is 20% of threadCount which appeared in concurrent suites.
Only makes sense to use in conjunction with the parallel parameter. The default value 0 behaves same as unspecified one.</description>
        </parameter>
        <parameter>
          <name>trimStackTrace</name>
          <type>boolean</type>
          <since>2.2</since>
          <required>false</required>
          <editable>true</editable>
          <description>Whether to trim the stack trace in the reports to just the lines within the test, or show the full trace.</description>
        </parameter>
        <parameter>
          <name>updateDiffChecksums</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Set this to &apos;true&apos; to update test dependencies on disk. The default value of &apos;false&apos; is useful for &apos;dry runs&apos; where one may want to see the diff without updating the test dependencies.</description>
        </parameter>
        <parameter>
          <name>updateSelectChecksums</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Set this to &apos;true&apos; to update test dependencies on disk. The default value of &apos;false&apos; is useful for &apos;dry runs&apos; where one may want to see the affected tests, without updating test dependencies.</description>
        </parameter>
        <parameter>
          <name>useFile</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Option to generate a file test report or just output the test report to the console.</description>
        </parameter>
        <parameter>
          <name>useManifestOnlyJar</name>
          <type>boolean</type>
          <since>2.4.3</since>
          <required>false</required>
          <editable>true</editable>
          <description>By default, Surefire forks your tests using a manifest-only JAR; set this parameter to &apos;false&apos; to force it to launch your tests with a plain old Java classpath. (See the http://maven.apache.org/plugins/maven-surefire-plugin/examples/class-loading.html for a more detailed explanation of manifest-only JARs and their benefits.)
Beware, setting this to &apos;false&apos; may cause your tests to fail on Windows if your classpath is too long.</description>
        </parameter>
        <parameter>
          <name>useSystemClassLoader</name>
          <type>boolean</type>
          <since>2.3</since>
          <required>false</required>
          <editable>true</editable>
          <description>Option to pass dependencies to the system&apos;s classloader instead of using an isolated class loader when forking. Prevents problems with JDKs which implement the service provider lookup mechanism by using the system&apos;s ClassLoader.</description>
        </parameter>
        <parameter>
          <name>useUnlimitedThreads</name>
          <type>boolean</type>
          <since>2.5</since>
          <required>false</required>
          <editable>true</editable>
          <description>(JUnit 4.7 provider) Indicates that the thread pool will be unlimited. The parallel parameter and the actual number of classes/methods will decide. Setting this to &apos;true&apos; effectively disables perCoreThreadCount and threadCount. Defaults to &apos;false&apos;.</description>
        </parameter>
        <parameter>
          <name>workingDirectory</name>
          <type>java.io.File</type>
          <since>2.1.3</since>
          <required>false</required>
          <editable>true</editable>
          <description>Command line working directory.</description>
        </parameter>
      </parameters>
      <configuration>
        <additionalClasspathElements implementation="java.lang.String[]">${maven.test.additionalClasspath}</additionalClasspathElements>
        <argLine implementation="java.lang.String">${argLine}</argLine>
        <basedir implementation="java.io.File" default-value="${basedir}"/>
        <childDelegation implementation="boolean" default-value="false">${childDelegation}</childDelegation>
        <classesDirectory implementation="java.io.File" default-value="${project.build.outputDirectory}"/>
        <classpathDependencyExcludes implementation="java.lang.String[]">${maven.test.dependency.excludes}</classpathDependencyExcludes>
        <cleanBytes implementation="boolean" default-value="true">${cleanBytes}</cleanBytes>
        <debugForkedProcess implementation="java.lang.String">${maven.surefire.debug}</debugForkedProcess>
        <dependenciesToScan implementation="java.lang.String[]">${dependenciesToScan}</dependenciesToScan>
        <depFormat implementation="edu.illinois.starts.enums.DependencyFormat" default-value="ZLC">${depFormat}</depFormat>
        <disableXmlReport implementation="boolean" default-value="false">${disableXmlReport}</disableXmlReport>
        <enableAssertions implementation="boolean" default-value="true">${enableAssertions}</enableAssertions>
        <excludedGroups implementation="java.lang.String">${excludedGroups}</excludedGroups>
        <excludesFile implementation="java.io.File">${surefire.excludesFile}</excludesFile>
        <failIfNoSpecifiedTests implementation="java.lang.Boolean">${surefire.failIfNoSpecifiedTests}</failIfNoSpecifiedTests>
        <failIfNoTests implementation="java.lang.Boolean">${failIfNoTests}</failIfNoTests>
        <filterLib implementation="boolean" default-value="false">${filterLib}</filterLib>
        <forkCount implementation="java.lang.String" default-value="1">${forkCount}</forkCount>
        <forkedProcessExitTimeoutInSeconds implementation="int" default-value="30">${surefire.exitTimeout}</forkedProcessExitTimeoutInSeconds>
        <forkedProcessTimeoutInSeconds implementation="int">${surefire.timeout}</forkedProcessTimeoutInSeconds>
        <forkMode implementation="java.lang.String" default-value="once">${forkMode}</forkMode>
        <graphCache implementation="java.lang.String" default-value="${basedir}${file.separator}jdeps-cache">${gCache}</graphCache>
        <groups implementation="java.lang.String">${groups}</groups>
        <includesFile implementation="java.io.File">${surefire.includesFile}</includesFile>
        <junitArtifactName implementation="java.lang.String" default-value="junit:junit">${junitArtifactName}</junitArtifactName>
        <jvm implementation="java.lang.String">${jvm}</jvm>
        <loggingLevel implementation="java.lang.String" default-value="CONFIG">${startsLogging}</loggingLevel>
        <objectFactory implementation="java.lang.String">${objectFactory}</objectFactory>
        <parallel implementation="java.lang.String">${parallel}</parallel>
        <parallelOptimized implementation="boolean" default-value="true">${parallelOptimized}</parallelOptimized>
        <parallelTestsTimeoutForcedInSeconds implementation="double">${surefire.parallel.forcedTimeout}</parallelTestsTimeoutForcedInSeconds>
        <parallelTestsTimeoutInSeconds implementation="double">${surefire.parallel.timeout}</parallelTestsTimeoutInSeconds>
        <perCoreThreadCount implementation="boolean" default-value="true">${perCoreThreadCount}</perCoreThreadCount>
        <printGraph implementation="boolean" default-value="true">${printGraph}</printGraph>
        <printSummary implementation="boolean" default-value="true">${surefire.printSummary}</printSummary>
        <redirectTestOutputToFile implementation="boolean" default-value="false">${maven.test.redirectTestOutputToFile}</redirectTestOutputToFile>
        <remoteRepositories implementation="java.util.List" default-value="${project.pluginArtifactRepositories}"/>
        <reportFormat implementation="java.lang.String" default-value="brief">${surefire.reportFormat}</reportFormat>
        <reportNameSuffix implementation="java.lang.String" default-value="">${surefire.reportNameSuffix}</reportNameSuffix>
        <reportsDirectory implementation="java.io.File" default-value="${project.build.directory}/surefire-reports"/>
        <rerunFailingTestsCount implementation="int" default-value="0">${surefire.rerunFailingTestsCount}</rerunFailingTestsCount>
        <reuseForks implementation="boolean" default-value="true">${reuseForks}</reuseForks>
        <runOrder implementation="java.lang.String" default-value="filesystem">${surefire.runOrder}</runOrder>
        <shutdown implementation="java.lang.String" default-value="testset">${surefire.shutdown}</shutdown>
        <skip implementation="boolean" default-value="false">${maven.test.skip}</skip>
        <skipAfterFailureCount implementation="int" default-value="0">${surefire.skipAfterFailureCount}</skipAfterFailureCount>
        <skipExec implementation="boolean">${maven.test.skip.exec}</skipExec>
        <skipTests implementation="boolean" default-value="false">${skipTests}</skipTests>
        <suiteXmlFiles implementation="java.io.File[]">${surefire.suiteXmlFiles}</suiteXmlFiles>
        <tempDir implementation="java.lang.String" default-value="surefire">${tempDir}</tempDir>
        <test implementation="java.lang.String">${test}</test>
        <testClassesDirectory implementation="java.io.File" default-value="${project.build.testOutputDirectory}"/>
        <testFailureIgnore implementation="boolean" default-value="false">${maven.test.failure.ignore}</testFailureIgnore>
        <testNGArtifactName implementation="java.lang.String" default-value="org.testng:testng">${testNGArtifactName}</testNGArtifactName>
        <testSourceDirectory implementation="java.io.File" default-value="${project.build.testSourceDirectory}"/>
        <threadCount implementation="int">${threadCount}</threadCount>
        <threadCountClasses implementation="int" default-value="0">${threadCountClasses}</threadCountClasses>
        <threadCountMethods implementation="int" default-value="0">${threadCountMethods}</threadCountMethods>
        <threadCountSuites implementation="int" default-value="0">${threadCountSuites}</threadCountSuites>
        <trimStackTrace implementation="boolean" default-value="true">${trimStackTrace}</trimStackTrace>
        <updateDiffChecksums implementation="boolean" default-value="false">${updateDiffChecksums}</updateDiffChecksums>
        <updateSelectChecksums implementation="boolean" default-value="false">${updateSelectChecksums}</updateSelectChecksums>
        <useFile implementation="boolean" default-value="true">${surefire.useFile}</useFile>
        <useManifestOnlyJar implementation="boolean" default-value="true">${surefire.useManifestOnlyJar}</useManifestOnlyJar>
        <useSystemClassLoader implementation="boolean" default-value="true">${surefire.useSystemClassLoader}</useSystemClassLoader>
        <useUnlimitedThreads implementation="boolean" default-value="false">${useUnlimitedThreads}</useUnlimitedThreads>
        <workingDirectory implementation="java.io.File">${basedir}</workingDirectory>
      </configuration>
    </mojo>
    <mojo>
      <goal>starts</goal>
      <description>Invoked after after running selected tests (see lifecycle.xml for details).</description>
      <requiresDependencyResolution>test</requiresDependencyResolution>
      <requiresDirectInvocation>true</requiresDirectInvocation>
      <requiresProject>true</requiresProject>
      <requiresReports>false</requiresReports>
      <aggregator>false</aggregator>
      <requiresOnline>false</requiresOnline>
      <inheritedByDefault>true</inheritedByDefault>
      <executePhase>test</executePhase>
      <executeLifecycle>starts</executeLifecycle>
      <implementation>edu.illinois.starts.jdeps.StartsMojo</implementation>
      <language>java</language>
      <instantiationStrategy>per-lookup</instantiationStrategy>
      <executionStrategy>once-per-session</executionStrategy>
      <threadSafe>false</threadSafe>
      <parameters>
        <parameter>
          <name>additionalClasspathElements</name>
          <type>java.lang.String[]</type>
          <since>2.4</since>
          <required>false</required>
          <editable>true</editable>
          <description>Additional elements to be appended to the classpath.</description>
        </parameter>
        <parameter>
          <name>argLine</name>
          <type>java.lang.String</type>
          <since>2.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>Arbitrary JVM options to set on the command line.

Since the Version 2.17 using an alternate syntax for argLine, @{...} allows late replacement of properties when the plugin is executed, so properties that have been modified by other plugins will be picked up correctly. See the Frequently Asked Questions page with more details:
http://maven.apache.org/surefire/maven-surefire-plugin/faq.html
http://maven.apache.org/surefire/maven-failsafe-plugin/faq.html</description>
        </parameter>
        <parameter>
          <name>basedir</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>The base directory of the project being tested. This can be obtained in your integration test via System.getProperty(&apos;basedir&apos;).</description>
        </parameter>
        <parameter>
          <name>childDelegation</name>
          <type>boolean</type>
          <since>2.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>When false it makes tests run using the standard classloader delegation instead of the default Maven isolated classloader. Only used when forking (forkMode is not none).
Setting it to false helps with some problems caused by conflicts between xml parsers in the classpath and the Java 5 provider parser.</description>
        </parameter>
        <parameter>
          <name>classesDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>The directory containing generated classes of the project being tested. This will be included after the test classes in the test classpath.</description>
        </parameter>
        <parameter>
          <name>classpathDependencyExcludes</name>
          <type>java.lang.String[]</type>
          <since>2.6</since>
          <required>false</required>
          <editable>true</editable>
          <description>List of dependencies to exclude from the test classpath. Each dependency string must follow the format groupId:artifactId. For example: org.acme:project-a</description>
        </parameter>
        <parameter>
          <name>classpathDependencyScopeExclude</name>
          <type>java.lang.String</type>
          <since>2.6</since>
          <required>false</required>
          <editable>true</editable>
          <description>A dependency scope to exclude from the test classpath. The scope should be one of the scopes defined by org.apache.maven.artifact.Artifact. This includes the following:

-	compile - system, provided, compile
-	runtime - compile, runtime
-	compile+runtime - system, provided, compile, runtime
-	runtime+system - system, compile, runtime
-	test - system, provided, compile, runtime, test
</description>
        </parameter>
        <parameter>
          <name>cleanBytes</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Set this to &apos;false&apos; to disable smart hashing, i.e., to *not* strip Bytecode files of debug info prior to computing checksums. See the &apos;Smart Checksums&apos; Sections in the Ekstazi paper: http://dl.acm.org/citation.cfm?id=2771784</description>
        </parameter>
        <parameter>
          <name>debugForkedProcess</name>
          <type>java.lang.String</type>
          <since>2.4</since>
          <required>false</required>
          <editable>true</editable>
          <description>Attach a debugger to the forked JVM. If set to &apos;true&apos;, the process will suspend and wait for a debugger to attach on port 5005. If set to some other string, that string will be appended to the argLine, allowing you to configure arbitrary debuggability options (without overwriting the other options specified through the argLine parameter).</description>
        </parameter>
        <parameter>
          <name>dependenciesToScan</name>
          <type>java.lang.String[]</type>
          <since>2.15</since>
          <required>false</required>
          <editable>true</editable>
          <description>List of dependencies to scan for test classes to include in the test run. The child elements of this element must be &lt;dependency&gt; elements, and the contents of each of these elements must be a string which follows the format: groupId:artifactId. For example: org.acme:project-a.</description>
        </parameter>
        <parameter>
          <name>depFormat</name>
          <type>edu.illinois.starts.enums.DependencyFormat</type>
          <required>false</required>
          <editable>true</editable>
          <description>Allows to switch the format in which we want to store the test dependencies. A full list of what we currently support can be found in</description>
        </parameter>
        <parameter>
          <name>disableXmlReport</name>
          <type>boolean</type>
          <since>2.2</since>
          <required>false</required>
          <editable>true</editable>
          <description>Flag to disable the generation of report files in xml format.</description>
        </parameter>
        <parameter>
          <name>enableAssertions</name>
          <type>boolean</type>
          <since>2.3.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>By default, Surefire enables JVM assertions for the execution of your test cases. To disable the assertions, set this flag to &apos;false&apos;.</description>
        </parameter>
        <parameter>
          <name>environmentVariables</name>
          <type>java.util.Map</type>
          <since>2.1.3</since>
          <required>false</required>
          <editable>true</editable>
          <description>Additional environment variables to set on the command line.</description>
        </parameter>
        <parameter>
          <name>excludedGroups</name>
          <type>java.lang.String</type>
          <since>2.2</since>
          <required>false</required>
          <editable>true</editable>
          <description>(TestNG/JUnit47 provider with JUnit4.8+ only) Excluded groups. Any methods/classes/etc with one of the groups specified in this list will specifically not be run.
For JUnit, this parameter forces the use of the 4.7 provider.
This parameter is ignored if the suiteXmlFiles parameter is specified.
Since version 2.18.1 and JUnit 4.12, the @Category annotation type is automatically inherited from superclasses, see @java.lang.annotation.Inherited. Make sure that test class inheritance still makes sense together with @Category annotation of the JUnit 4.12 or higher appeared in superclass.</description>
        </parameter>
        <parameter>
          <name>excludes</name>
          <type>java.util.List</type>
          <required>false</required>
          <editable>true</editable>
          <description>A list of &lt;exclude&gt; elements specifying the tests (by pattern) that should be excluded in testing. When not specified and when the test parameter is not specified, the default excludes will be

&lt;excludes&gt;
    &lt;exclude&gt;**/*$*&lt;/exclude&gt;
&lt;/excludes&gt;

(which excludes all inner classes).
This parameter is ignored if the TestNG suiteXmlFiles parameter is specified.
Each exclude item may also contain a comma-separated sub-list of items, which will be treated as multiple Â &lt;exclude&gt; entries.
Since 2.19 a complex syntax is supported in one parameter (JUnit 4, JUnit 4.7+, TestNG):
&lt;exclude&gt;%regex[pkg.*Slow.*.class], Unstable*&lt;/exclude&gt;


Notice that these values are relative to the directory containing generated test classes of the project being tested. This directory is declared by the parameter testClassesDirectory which defaults to the POM property ${project.build.testOutputDirectory}, typically src/test/java unless overridden.</description>
        </parameter>
        <parameter>
          <name>excludesFile</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>A file containing exclude patterns. Blank lines, or lines starting with # are ignored. If excludes are also specified, these patterns are appended. Example with path, simple and regex excludes:

*/test/*
**/DontRunTest.*
%regex[.*Test.*|.*Not.*]

</description>
        </parameter>
        <parameter>
          <name>failIfNoSpecifiedTests</name>
          <type>java.lang.Boolean</type>
          <since>2.12</since>
          <required>false</required>
          <editable>true</editable>
          <description>Set this to &apos;true&apos; to cause a failure if none of the tests specified in -Dtest=... are run. Defaults to &apos;true&apos;.</description>
        </parameter>
        <parameter>
          <name>failIfNoTests</name>
          <type>java.lang.Boolean</type>
          <since>2.4</since>
          <required>false</required>
          <editable>true</editable>
          <description>Set this to &apos;true&apos; to cause a failure if there are no tests to run. Defaults to &apos;false&apos;.</description>
        </parameter>
        <parameter>
          <name>filterLib</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Set this to &apos;false&apos; to not filter out &apos;sun.*&apos; and &apos;java.*&apos; classes from jdeps parsing.</description>
        </parameter>
        <parameter>
          <name>forkCount</name>
          <type>java.lang.String</type>
          <since>2.14</since>
          <required>false</required>
          <editable>true</editable>
          <description>Option to specify the number of VMs to fork in parallel in order to execute the tests. When terminated with &apos;C&apos;, the number part is multiplied with the number of CPU cores. Floating point value are only accepted together with &apos;C&apos;. If set to &apos;0&apos;, no VM is forked and all tests are executed within the main process.

Example values: &apos;1.5C&apos;, &apos;4&apos;

The system properties and the argLine of the forked processes may contain the place holder string ${surefire.forkNumber}, which is replaced with a fixed number for each of the parallel forks, ranging from 1 to the effective value of forkCount times the maximum number of parallel Surefire executions in maven parallel builds, i.e. the effective value of the -T command line argument of maven core.</description>
        </parameter>
        <parameter>
          <name>forkedProcessExitTimeoutInSeconds</name>
          <type>int</type>
          <since>2.20</since>
          <required>false</required>
          <editable>true</editable>
          <description>Forked process is normally terminated without any significant delay after given tests have completed. If the particular tests started non-daemon Thread(s), the process hangs instead of been properly terminated by System.exit(). Use this parameter in order to determine the timeout of terminating the process. see the documentation: http://maven.apache.org/surefire/maven-surefire-plugin/examples/shutdown.html Turns to default fallback value of 30 seconds if negative integer.</description>
        </parameter>
        <parameter>
          <name>forkedProcessTimeoutInSeconds</name>
          <type>int</type>
          <since>2.4</since>
          <required>false</required>
          <editable>true</editable>
          <description>Kill the forked test process after a certain number of seconds. If set to 0, wait forever for the process, never timing out.</description>
        </parameter>
        <parameter>
          <name>forkMode</name>
          <type>java.lang.String</type>
          <since>2.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>DEPRECATED since version 2.14. Use forkCount and reuseForks instead.

Option to specify the forking mode. Can be never, once, always, perthread.
The none and pertest are also accepted for backwards compatibility.
The always forks for each test-class.
The perthread creates the number of parallel forks specified by threadCount, where each forked JVM is executing one test-class. See also the parameter reuseForks for the lifetime of JVM.</description>
        </parameter>
        <parameter>
          <name>graphCache</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Path to directory that contains the result of running jdeps on third-party and standard library jars that an application may need, e.g., those in M2_REPO.</description>
        </parameter>
        <parameter>
          <name>groups</name>
          <type>java.lang.String</type>
          <since>2.2</since>
          <required>false</required>
          <editable>true</editable>
          <description>(TestNG/JUnit47 provider with JUnit4.8+ only) Groups for this test. Only classes/methods/etc decorated with one of the groups specified here will be included in test run, if specified.
For JUnit, this parameter forces the use of the 4.7 provider
This parameter is ignored if the suiteXmlFiles parameter is specified.
Since version 2.18.1 and JUnit 4.12, the @Category annotation type is automatically inherited from superclasses, see @java.lang.annotation.Inherited. Make sure that test class inheritance still makes sense together with @Category annotation of the JUnit 4.12 or higher appeared in superclass.</description>
        </parameter>
        <parameter>
          <name>includes</name>
          <type>java.util.List</type>
          <required>false</required>
          <editable>true</editable>
          <description>A list of &lt;include&gt; elements specifying the tests (by pattern) that should be included in testing. When not specified and when the test parameter is not specified, the default includes will be
&lt;includes&gt;
    &lt;include&gt;**/Test*.java&lt;/include&gt;
    &lt;include&gt;**/*Test.java&lt;/include&gt;
    &lt;include&gt;**/*Tests.java&lt;/include&gt;
    &lt;include&gt;**/*TestCase.java&lt;/include&gt;
&lt;/includes&gt;

Each include item may also contain a comma-separated sub-list of items, which will be treated as multiple Â &lt;include&gt; entries.
Since 2.19 a complex syntax is supported in one parameter (JUnit 4, JUnit 4.7+, TestNG):



&lt;include&gt;%regex[.*[Cat|Dog].*], Basic????, !Unstable*&lt;/include&gt; &lt;include&gt;%regex[.*[Cat|Dog].*], !%regex[pkg.*Slow.*.class], pkg/**/*Fast*.java&lt;/include&gt;
This parameter is ignored if the TestNG suiteXmlFiles parameter is specified.

Notice that these values are relative to the directory containing generated test classes of the project being tested. This directory is declared by the parameter testClassesDirectory which defaults to the POM property ${project.build.testOutputDirectory}, typically src/test/java unless overridden.</description>
        </parameter>
        <parameter>
          <name>includesFile</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>A file containing include patterns. Blank lines, or lines starting with # are ignored. If includes are also specified, these patterns are appended. Example with path, simple and regex includes:
*/test/*
**/NotIncludedByDefault.java
%regex[.*Test.*|.*Not.*]

</description>
        </parameter>
        <parameter>
          <name>junitArtifactName</name>
          <type>java.lang.String</type>
          <since>2.3.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>Allows you to specify the name of the JUnit artifact. If not set, junit:junit will be used.</description>
        </parameter>
        <parameter>
          <name>jvm</name>
          <type>java.lang.String</type>
          <since>2.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>Option to specify the jvm (or path to the java executable) to use with the forking options. For the default, the jvm will be a new instance of the same VM as the one used to run Maven. JVM settings are not inherited from MAVEN_OPTS.</description>
        </parameter>
        <parameter>
          <name>loggingLevel</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Log levels as defined in java.util.logging.Level.</description>
        </parameter>
        <parameter>
          <name>objectFactory</name>
          <type>java.lang.String</type>
          <since>2.5</since>
          <required>false</required>
          <editable>true</editable>
          <description>(TestNG only) Define the factory class used to create all test instances.</description>
        </parameter>
        <parameter>
          <name>parallel</name>
          <type>java.lang.String</type>
          <since>2.2</since>
          <required>false</required>
          <editable>true</editable>
          <description>(TestNG provider) When you use the parameter parallel, TestNG will try to run all your test methods in separate threads, except for methods that depend on each other, which will be run in the same thread in order to respect their order of execution.
(JUnit 4.7 provider) Supports values classes, methods, both to run in separate threads been controlled by threadCount.

Since version 2.16 (JUnit 4.7 provider), the value both is DEPRECATED. Use classesAndMethods instead.

Since version 2.16 (JUnit 4.7 provider), additional vales are available:
suites, suitesAndClasses, suitesAndMethods, classesAndMethods, all.</description>
        </parameter>
        <parameter>
          <name>parallelOptimized</name>
          <type>boolean</type>
          <since>2.17</since>
          <required>false</required>
          <editable>true</editable>
          <description>(JUnit 4.7 / provider only) The thread counts do not exceed the number of parallel suite, class runners and average number of methods per class if set to true.
True by default.</description>
        </parameter>
        <parameter>
          <name>parallelTestsTimeoutForcedInSeconds</name>
          <type>double</type>
          <since>2.16</since>
          <required>false</required>
          <editable>true</editable>
          <description>Stop executing queued parallel JUnit tests and interrupt currently running tests after a certain number of seconds.
Example values: &apos;3.5&apos;, &apos;4&apos;

If set to 0, wait forever, never timing out. Makes sense with specified parallel different from &apos;none&apos;.</description>
        </parameter>
        <parameter>
          <name>parallelTestsTimeoutInSeconds</name>
          <type>double</type>
          <since>2.16</since>
          <required>false</required>
          <editable>true</editable>
          <description>Stop executing queued parallel JUnit tests after a certain number of seconds.
Example values: &apos;3.5&apos;, &apos;4&apos;

If set to 0, wait forever, never timing out. Makes sense with specified parallel different from &apos;none&apos;.</description>
        </parameter>
        <parameter>
          <name>perCoreThreadCount</name>
          <type>boolean</type>
          <since>2.5</since>
          <required>false</required>
          <editable>true</editable>
          <description>(JUnit 4.7 provider) Indicates that threadCount, threadCountSuites, threadCountClasses, threadCountMethods are per cpu core.</description>
        </parameter>
        <parameter>
          <name>printGraph</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Set this to &apos;false&apos; to not print the graph obtained from jdeps parsing. When &apos;true&apos; the graph is written to file after the run.</description>
        </parameter>
        <parameter>
          <name>printSummary</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Option to print summary of test suites or just print the test cases that have errors.</description>
        </parameter>
        <parameter>
          <name>properties</name>
          <type>java.util.Properties</type>
          <since>2.4</since>
          <required>false</required>
          <editable>true</editable>
          <description>List of properties for configuring all TestNG related configurations. This is the new preferred method of configuring TestNG.</description>
        </parameter>
        <parameter>
          <name>redirectTestOutputToFile</name>
          <type>boolean</type>
          <since>2.3</since>
          <required>false</required>
          <editable>true</editable>
          <description>Set this to &apos;true&apos; to redirect the unit test standard output to a file (found in reportsDirectory/testName-output.txt).</description>
        </parameter>
        <parameter>
          <name>remoteRepositories</name>
          <type>java.util.List</type>
          <since>2.2</since>
          <required>false</required>
          <editable>true</editable>
          <description>The remote plugin repositories declared in the POM.</description>
        </parameter>
        <parameter>
          <name>reportFormat</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Selects the formatting for the test report to be generated. Can be set as &apos;brief&apos; or &apos;plain&apos;. Only applies to the output format of the output files (target/surefire-reports/testName.txt)</description>
        </parameter>
        <parameter>
          <name>reportNameSuffix</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Add custom text into report filename: TEST-testClassName-reportNameSuffix.xml, testClassName-reportNameSuffix.txt and testClassName-reportNameSuffix-output.txt. File TEST-testClassName-reportNameSuffix.xml has changed attributes &apos;testsuite&apos;--&apos;name&apos; and &apos;testcase&apos;--&apos;classname&apos; - reportNameSuffix is added to the attribute value.</description>
        </parameter>
        <parameter>
          <name>reportsDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>Base directory where all reports are written to.</description>
        </parameter>
        <parameter>
          <name>rerunFailingTestsCount</name>
          <type>int</type>
          <required>false</required>
          <editable>true</editable>
          <description>(JUnit 4+ providers) The number of times each failing test will be rerun. If set larger than 0, rerun failing tests immediately after they fail. If a failing test passes in any of those reruns, it will be marked as pass and reported as a &apos;flake&apos;. However, all the failing attempts will be recorded.</description>
        </parameter>
        <parameter>
          <name>retestAll</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Set this option to &apos;true&apos; to run all tests, not just the affected ones. This option is useful in cases where one is interested to measure the time to run all tests, while at the same time measuring the times for analyzing what tests to select and reporting the number of tests it would select. Note: Run with &apos;-DstartsLogging=FINER&apos; or &apos;-DstartsLogging=FINEST&apos; so that the &apos;selected-tests&apos; file, which contains the list of tests that would be run if this option is set to false, will be written to disk.</description>
        </parameter>
        <parameter>
          <name>reuseForks</name>
          <type>boolean</type>
          <since>2.13</since>
          <required>false</required>
          <editable>true</editable>
          <description>Indicates if forked VMs can be reused. If set to &apos;false&apos;, a new VM is forked for each test class to be executed. If set to &apos;true&apos;, up to forkCount VMs will be forked and then reused to execute all tests.</description>
        </parameter>
        <parameter>
          <name>runOrder</name>
          <type>java.lang.String</type>
          <since>2.7</since>
          <required>false</required>
          <editable>true</editable>
          <description>Defines the order the tests will be run in. Supported values are alphabetical, reversealphabetical, random, hourly (alphabetical on even hours, reverse alphabetical on odd hours), failedfirst, balanced and filesystem.

Odd/Even for hourly is determined at the time the of scanning the classpath, meaning it could change during a multi-module build.

Failed first will run tests that failed on previous run first, as well as new tests for this run.

Balanced is only relevant with parallel=classes, and will try to optimize the run-order of the tests reducing the overall execution time. Initially a statistics file is created and every next test run will reorder classes.

Note that the statistics are stored in a file named .surefire-XXXXXXXXX beside pom.xml and should not be checked into version control. The &apos;XXXXX&apos; is the SHA1 checksum of the entire surefire configuration, so different configurations will have different statistics files, meaning if you change any configuration settings you will re-run once before new statistics data can be established.</description>
        </parameter>
        <parameter>
          <name>shutdown</name>
          <type>java.lang.String</type>
          <since>2.19</since>
          <required>false</required>
          <editable>true</editable>
          <description>After the plugin process is shutdown by sending SIGTERM signal (CTRL+C), SHUTDOWN command is received by every forked JVM.
By default (shutdown=testset) forked JVM would not continue with new test which means that the current test may still continue to run.
The parameter can be configured with other two values exit and kill.
Using exit forked JVM executes System.exit(1) after the plugin process has received SIGTERM signal.
Using kill the JVM executes Runtime.halt(1) and kills itself.</description>
        </parameter>
        <parameter>
          <name>skip</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Set this to &apos;true&apos; to bypass unit tests entirely. Its use is NOT RECOMMENDED, especially if you enable it using the &apos;maven.test.skip&apos; property, because maven.test.skip disables both running the tests and compiling the tests. Consider using the skipTests parameter instead.</description>
        </parameter>
        <parameter>
          <name>skipAfterFailureCount</name>
          <type>int</type>
          <since>2.19</since>
          <required>false</required>
          <editable>true</editable>
          <description>Set to error/failure count in order to skip remaining tests. Due to race conditions in parallel/forked execution this may not be fully guaranteed.
Enable with system property -Dsurefire.skipAfterFailureCount=1 or any number greater than zero. Defaults to &apos;0&apos;.
See the prerequisites and limitations in documentation:
http://maven.apache.org/plugins/maven-surefire-plugin/examples/skip-after-failure.html</description>
        </parameter>
        <parameter>
          <name>skipExec</name>
          <type>boolean</type>
          <since>2.3</since>
          <deprecated>Use skipTests instead.</deprecated>
          <required>false</required>
          <editable>true</editable>
          <description>This old parameter is just like skipTests, but bound to the old property &apos;maven.test.skip.exec&apos;.</description>
        </parameter>
        <parameter>
          <name>skipTests</name>
          <type>boolean</type>
          <since>2.4</since>
          <required>false</required>
          <editable>true</editable>
          <description>Set this to &apos;true&apos; to skip running tests, but still compile them. Its use is NOT RECOMMENDED, but quite convenient on occasion.</description>
        </parameter>
        <parameter>
          <name>suiteXmlFiles</name>
          <type>java.io.File[]</type>
          <since>2.2</since>
          <required>false</required>
          <editable>true</editable>
          <description>(TestNG) List of &lt;suiteXmlFile&gt; elements specifying TestNG suite xml file locations. Note that suiteXmlFiles is incompatible with several other parameters of this plugin, like includes and excludes.
This parameter is ignored if the test parameter is specified (allowing you to run a single test instead of an entire suite).</description>
        </parameter>
        <parameter>
          <name>systemProperties</name>
          <type>java.util.Properties</type>
          <deprecated>Use systemPropertyVariables instead.</deprecated>
          <required>false</required>
          <editable>true</editable>
          <description>List of System properties to pass to the JUnit tests.</description>
        </parameter>
        <parameter>
          <name>systemPropertiesFile</name>
          <type>java.io.File</type>
          <since>2.8.2</since>
          <required>false</required>
          <editable>true</editable>
          <description>List of System properties, loaded from a file, to pass to the JUnit tests.</description>
        </parameter>
        <parameter>
          <name>systemPropertyVariables</name>
          <type>java.util.Map</type>
          <since>2.5</since>
          <required>false</required>
          <editable>true</editable>
          <description>List of System properties to pass to the JUnit tests.</description>
        </parameter>
        <parameter>
          <name>tempDir</name>
          <type>java.lang.String</type>
          <since>2.20</since>
          <required>false</required>
          <editable>true</editable>
          <description>Relative path to temporary-surefire-boot directory containing internal Surefire temporary files.
The temporary-surefire-boot directory is project.build.directory on most platforms or system default temporary-directory specified by the system property java.io.tmpdir on Windows (see SUREFIRE-1400).
It is deleted after the test set has completed.</description>
        </parameter>
        <parameter>
          <name>test</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specify this parameter to run individual tests by file name, overriding the parameter includes and excludes. Each pattern you specify here will be used to create an include pattern formatted like **/${test}.java, so you can just type -Dtest=MyTest to run a single test called &apos;foo/MyTest.java&apos;. The test patterns prefixed with a ! will be excluded.
This parameter overrides the parameter includes, excludes, and the TestNG parameter suiteXmlFiles.
Since 2.7.3, you can execute a limited number of methods in the test by adding #myMethod or #my*ethod. For example, -Dtest=MyTest#myMethod. This is supported for junit 4.x and TestNg.

Since 2.19 a complex syntax is supported in one parameter (JUnit 4, JUnit 4.7+, TestNG):
&apos;-Dtest=???Test, !Unstable*, pkg/**/Ci*leTest.java, *Test#test*One+testTwo?????, #fast*+slowTest&apos;

or e.g.
&apos;-Dtest=Basic*, !%regex[.*.Unstable.*], !%regex[.*.MyTest.class#one.*|two.*], %regex[#fast.*|slow.*]&apos;


The Parameterized JUnit runner describes test methods using an index in brackets, so the non-regex method pattern would become: #testMethod[*]. If using @Parameters(name=&apos;{index}: fib({0})={1}&apos;) and selecting the index e.g. 5 in pattern, the non-regex method pattern would become #testMethod[5:*].</description>
        </parameter>
        <parameter>
          <name>testClassesDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>The directory containing generated test classes of the project being tested. This will be included at the beginning of the test classpath. *</description>
        </parameter>
        <parameter>
          <name>testFailureIgnore</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Set this to &apos;true&apos; to ignore a failure during testing. Its use is NOT RECOMMENDED, but quite convenient on occasion.</description>
        </parameter>
        <parameter>
          <name>testNGArtifactName</name>
          <type>java.lang.String</type>
          <since>2.3.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>Allows you to specify the name of the TestNG artifact. If not set, org.testng:testng will be used.</description>
        </parameter>
        <parameter>
          <name>testSourceDirectory</name>
          <type>java.io.File</type>
          <since>2.2</since>
          <required>true</required>
          <editable>true</editable>
          <description>The test source directory containing test class sources.</description>
        </parameter>
        <parameter>
          <name>threadCount</name>
          <type>int</type>
          <since>2.2</since>
          <required>false</required>
          <editable>true</editable>
          <description>(TestNG/JUnit 4.7 provider) The attribute thread-count allows you to specify how many threads should be allocated for this execution. Only makes sense to use in conjunction with the parallel parameter.</description>
        </parameter>
        <parameter>
          <name>threadCountClasses</name>
          <type>int</type>
          <since>2.16</since>
          <required>false</required>
          <editable>true</editable>
          <description>(JUnit 4.7 provider) This attribute allows you to specify the concurrency in test classes, i.e.:
-	number of concurrent classes if threadCount is 0 or unspecified
-	limited classes concurrency if useUnlimitedThreads is set to true
-	if threadCount and certain thread-count parameters are &gt; 0 for parallel, the concurrency is computed from ratio. For instance parallel=all and the ratio between threadCountSuites:threadCountClasses:threadCountMethods is 2:3:5, there is 30% of threadCount in concurrent classes.
-	as in the previous case but without this leaf thread-count. Example: parallel=suitesAndClasses, threadCount=16, threadCountSuites=5, threadCountClasses is unspecified leaf, the number of concurrent classes is varying from &gt;= 11 to 14 or 15. The threadCountSuites become given number of threads.
Only makes sense to use in conjunction with the parallel parameter. The default value 0 behaves same as unspecified one.</description>
        </parameter>
        <parameter>
          <name>threadCountMethods</name>
          <type>int</type>
          <since>2.16</since>
          <required>false</required>
          <editable>true</editable>
          <description>(JUnit 4.7 provider) This attribute allows you to specify the concurrency in test methods, i.e.:
-	number of concurrent methods if threadCount is 0 or unspecified
-	limited concurrency of methods if useUnlimitedThreads is set to true
-	if threadCount and certain thread-count parameters are &gt; 0 for parallel, the concurrency is computed from ratio. For instance parallel=all and the ratio between threadCountSuites:threadCountClasses:threadCountMethods is 2:3:5, there is 50% of threadCount which appears in concurrent methods.
-	as in the previous case but without this leaf thread-count. Example: parallel=all, threadCount=16, threadCountSuites=2, threadCountClasses=3, but threadCountMethods is unspecified leaf, the number of concurrent methods is varying from &gt;= 11 to 14 or 15. The threadCountSuites and threadCountClasses become given number of threads.
Only makes sense to use in conjunction with the parallel parameter. The default value 0 behaves same as unspecified one.</description>
        </parameter>
        <parameter>
          <name>threadCountSuites</name>
          <type>int</type>
          <since>2.16</since>
          <required>false</required>
          <editable>true</editable>
          <description>(JUnit 4.7 provider) This attribute allows you to specify the concurrency in test suites, i.e.:
-	number of concurrent suites if threadCount is 0 or unspecified
-	limited suites concurrency if useUnlimitedThreads is set to true
-	if threadCount and certain thread-count parameters are &gt; 0 for parallel, the concurrency is computed from ratio. For instance parallel=all and the ratio between threadCountSuites:threadCountClasses:threadCountMethods is 2:3:5, there is 20% of threadCount which appeared in concurrent suites.
Only makes sense to use in conjunction with the parallel parameter. The default value 0 behaves same as unspecified one.</description>
        </parameter>
        <parameter>
          <name>trimStackTrace</name>
          <type>boolean</type>
          <since>2.2</since>
          <required>false</required>
          <editable>true</editable>
          <description>Whether to trim the stack trace in the reports to just the lines within the test, or show the full trace.</description>
        </parameter>
        <parameter>
          <name>updateDiffChecksums</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Set this to &apos;true&apos; to update test dependencies on disk. The default value of &apos;false&apos; is useful for &apos;dry runs&apos; where one may want to see the diff without updating the test dependencies.</description>
        </parameter>
        <parameter>
          <name>updateRunChecksums</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Set this to &apos;false&apos; to prevent checksums from being persisted to disk. This is useful for &apos;dry runs&apos; where one may want to see the non-affected tests that STARTS writes to the Surefire excludesFile, without updating test dependencies.</description>
        </parameter>
        <parameter>
          <name>useFile</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Option to generate a file test report or just output the test report to the console.</description>
        </parameter>
        <parameter>
          <name>useManifestOnlyJar</name>
          <type>boolean</type>
          <since>2.4.3</since>
          <required>false</required>
          <editable>true</editable>
          <description>By default, Surefire forks your tests using a manifest-only JAR; set this parameter to &apos;false&apos; to force it to launch your tests with a plain old Java classpath. (See the http://maven.apache.org/plugins/maven-surefire-plugin/examples/class-loading.html for a more detailed explanation of manifest-only JARs and their benefits.)
Beware, setting this to &apos;false&apos; may cause your tests to fail on Windows if your classpath is too long.</description>
        </parameter>
        <parameter>
          <name>useSystemClassLoader</name>
          <type>boolean</type>
          <since>2.3</since>
          <required>false</required>
          <editable>true</editable>
          <description>Option to pass dependencies to the system&apos;s classloader instead of using an isolated class loader when forking. Prevents problems with JDKs which implement the service provider lookup mechanism by using the system&apos;s ClassLoader.</description>
        </parameter>
        <parameter>
          <name>useUnlimitedThreads</name>
          <type>boolean</type>
          <since>2.5</since>
          <required>false</required>
          <editable>true</editable>
          <description>(JUnit 4.7 provider) Indicates that the thread pool will be unlimited. The parallel parameter and the actual number of classes/methods will decide. Setting this to &apos;true&apos; effectively disables perCoreThreadCount and threadCount. Defaults to &apos;false&apos;.</description>
        </parameter>
        <parameter>
          <name>workingDirectory</name>
          <type>java.io.File</type>
          <since>2.1.3</since>
          <required>false</required>
          <editable>true</editable>
          <description>Command line working directory.</description>
        </parameter>
        <parameter>
          <name>writeChangedClasses</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Set this to &apos;true&apos; to save changedClasses to a file on disk. Note: Running with &apos;-DstartsLogging=FINEST&apos; also saves changedClasses to a file on disk.</description>
        </parameter>
        <parameter>
          <name>writeNonAffected</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Set this to &apos;true&apos; to save nonAffectedTests to a file on disk. This improves the time for updating test dependencies in offline mode by not running computeChangeData() twice. Note: Running with &apos;-DstartsLogging=FINEST&apos; also saves nonAffectedTests to a file on disk.</description>
        </parameter>
      </parameters>
      <configuration>
        <additionalClasspathElements implementation="java.lang.String[]">${maven.test.additionalClasspath}</additionalClasspathElements>
        <argLine implementation="java.lang.String">${argLine}</argLine>
        <basedir implementation="java.io.File" default-value="${basedir}"/>
        <childDelegation implementation="boolean" default-value="false">${childDelegation}</childDelegation>
        <classesDirectory implementation="java.io.File" default-value="${project.build.outputDirectory}"/>
        <classpathDependencyExcludes implementation="java.lang.String[]">${maven.test.dependency.excludes}</classpathDependencyExcludes>
        <cleanBytes implementation="boolean" default-value="true">${cleanBytes}</cleanBytes>
        <debugForkedProcess implementation="java.lang.String">${maven.surefire.debug}</debugForkedProcess>
        <dependenciesToScan implementation="java.lang.String[]">${dependenciesToScan}</dependenciesToScan>
        <depFormat implementation="edu.illinois.starts.enums.DependencyFormat" default-value="ZLC">${depFormat}</depFormat>
        <disableXmlReport implementation="boolean" default-value="false">${disableXmlReport}</disableXmlReport>
        <enableAssertions implementation="boolean" default-value="true">${enableAssertions}</enableAssertions>
        <excludedGroups implementation="java.lang.String">${excludedGroups}</excludedGroups>
        <excludesFile implementation="java.io.File">${surefire.excludesFile}</excludesFile>
        <failIfNoSpecifiedTests implementation="java.lang.Boolean">${surefire.failIfNoSpecifiedTests}</failIfNoSpecifiedTests>
        <failIfNoTests implementation="java.lang.Boolean">${failIfNoTests}</failIfNoTests>
        <filterLib implementation="boolean" default-value="false">${filterLib}</filterLib>
        <forkCount implementation="java.lang.String" default-value="1">${forkCount}</forkCount>
        <forkedProcessExitTimeoutInSeconds implementation="int" default-value="30">${surefire.exitTimeout}</forkedProcessExitTimeoutInSeconds>
        <forkedProcessTimeoutInSeconds implementation="int">${surefire.timeout}</forkedProcessTimeoutInSeconds>
        <forkMode implementation="java.lang.String" default-value="once">${forkMode}</forkMode>
        <graphCache implementation="java.lang.String" default-value="${basedir}${file.separator}jdeps-cache">${gCache}</graphCache>
        <groups implementation="java.lang.String">${groups}</groups>
        <includesFile implementation="java.io.File">${surefire.includesFile}</includesFile>
        <junitArtifactName implementation="java.lang.String" default-value="junit:junit">${junitArtifactName}</junitArtifactName>
        <jvm implementation="java.lang.String">${jvm}</jvm>
        <loggingLevel implementation="java.lang.String" default-value="CONFIG">${startsLogging}</loggingLevel>
        <objectFactory implementation="java.lang.String">${objectFactory}</objectFactory>
        <parallel implementation="java.lang.String">${parallel}</parallel>
        <parallelOptimized implementation="boolean" default-value="true">${parallelOptimized}</parallelOptimized>
        <parallelTestsTimeoutForcedInSeconds implementation="double">${surefire.parallel.forcedTimeout}</parallelTestsTimeoutForcedInSeconds>
        <parallelTestsTimeoutInSeconds implementation="double">${surefire.parallel.timeout}</parallelTestsTimeoutInSeconds>
        <perCoreThreadCount implementation="boolean" default-value="true">${perCoreThreadCount}</perCoreThreadCount>
        <printGraph implementation="boolean" default-value="true">${printGraph}</printGraph>
        <printSummary implementation="boolean" default-value="true">${surefire.printSummary}</printSummary>
        <redirectTestOutputToFile implementation="boolean" default-value="false">${maven.test.redirectTestOutputToFile}</redirectTestOutputToFile>
        <remoteRepositories implementation="java.util.List" default-value="${project.pluginArtifactRepositories}"/>
        <reportFormat implementation="java.lang.String" default-value="brief">${surefire.reportFormat}</reportFormat>
        <reportNameSuffix implementation="java.lang.String" default-value="">${surefire.reportNameSuffix}</reportNameSuffix>
        <reportsDirectory implementation="java.io.File" default-value="${project.build.directory}/surefire-reports"/>
        <rerunFailingTestsCount implementation="int" default-value="0">${surefire.rerunFailingTestsCount}</rerunFailingTestsCount>
        <retestAll implementation="boolean" default-value="false">${retestAll}</retestAll>
        <reuseForks implementation="boolean" default-value="true">${reuseForks}</reuseForks>
        <runOrder implementation="java.lang.String" default-value="filesystem">${surefire.runOrder}</runOrder>
        <shutdown implementation="java.lang.String" default-value="testset">${surefire.shutdown}</shutdown>
        <skip implementation="boolean" default-value="false">${maven.test.skip}</skip>
        <skipAfterFailureCount implementation="int" default-value="0">${surefire.skipAfterFailureCount}</skipAfterFailureCount>
        <skipExec implementation="boolean">${maven.test.skip.exec}</skipExec>
        <skipTests implementation="boolean" default-value="false">${skipTests}</skipTests>
        <suiteXmlFiles implementation="java.io.File[]">${surefire.suiteXmlFiles}</suiteXmlFiles>
        <tempDir implementation="java.lang.String" default-value="surefire">${tempDir}</tempDir>
        <test implementation="java.lang.String">${test}</test>
        <testClassesDirectory implementation="java.io.File" default-value="${project.build.testOutputDirectory}"/>
        <testFailureIgnore implementation="boolean" default-value="false">${maven.test.failure.ignore}</testFailureIgnore>
        <testNGArtifactName implementation="java.lang.String" default-value="org.testng:testng">${testNGArtifactName}</testNGArtifactName>
        <testSourceDirectory implementation="java.io.File" default-value="${project.build.testSourceDirectory}"/>
        <threadCount implementation="int">${threadCount}</threadCount>
        <threadCountClasses implementation="int" default-value="0">${threadCountClasses}</threadCountClasses>
        <threadCountMethods implementation="int" default-value="0">${threadCountMethods}</threadCountMethods>
        <threadCountSuites implementation="int" default-value="0">${threadCountSuites}</threadCountSuites>
        <trimStackTrace implementation="boolean" default-value="true">${trimStackTrace}</trimStackTrace>
        <updateDiffChecksums implementation="boolean" default-value="false">${updateDiffChecksums}</updateDiffChecksums>
        <updateRunChecksums implementation="boolean" default-value="true">${updateRunChecksums}</updateRunChecksums>
        <useFile implementation="boolean" default-value="true">${surefire.useFile}</useFile>
        <useManifestOnlyJar implementation="boolean" default-value="true">${surefire.useManifestOnlyJar}</useManifestOnlyJar>
        <useSystemClassLoader implementation="boolean" default-value="true">${surefire.useSystemClassLoader}</useSystemClassLoader>
        <useUnlimitedThreads implementation="boolean" default-value="false">${useUnlimitedThreads}</useUnlimitedThreads>
        <workingDirectory implementation="java.io.File">${basedir}</workingDirectory>
        <writeChangedClasses implementation="boolean" default-value="false">${writeChangedClasses}</writeChangedClasses>
        <writeNonAffected implementation="boolean" default-value="false">${writeNonAffected}</writeNonAffected>
      </configuration>
    </mojo>
  </mojos>
</plugin>